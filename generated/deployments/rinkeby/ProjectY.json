{
  "address": "0x8c974Dc6e834CDe3b9ce1BbC39B5577D00eDe067",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entryId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "Bid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entryId",
          "type": "uint256"
        }
      ],
      "name": "BidSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE_MONTH",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice_",
          "type": "uint256"
        },
        {
          "internalType": "enum ProjectY.InstallmentPlan",
          "name": "installment_",
          "type": "uint8"
        }
      ],
      "name": "bid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "biddingPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entryId",
          "type": "uint256"
        }
      ],
      "name": "getAllBidsOnNFT",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isSelected",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "bidPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entryId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePaid",
              "type": "uint256"
            },
            {
              "internalType": "enum ProjectY.InstallmentPlan",
              "name": "bidInstallment",
              "type": "uint8"
            }
          ],
          "internalType": "struct ProjectY.BuyerInfo[]",
          "name": "allBidsOnNFT_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "name": "getBuyerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isSelected",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "bidPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entryId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePaid",
              "type": "uint256"
            },
            {
              "internalType": "enum ProjectY.InstallmentPlan",
              "name": "bidInstallment",
              "type": "uint8"
            }
          ],
          "internalType": "struct ProjectY.BuyerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "name": "getDownPaymentAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "installmentNumber_",
          "type": "uint256"
        }
      ],
      "name": "getInstallmentAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        }
      ],
      "name": "getInstallmentAmountPerMonth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "installmentNumber_",
          "type": "uint64"
        }
      ],
      "name": "getInstallmentMonthTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNFTsOpenForSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "onSale",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "sellerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "installmentsPaid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "paymentsClaimed",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellingPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBids",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "selectedBidId",
              "type": "uint256"
            },
            {
              "internalType": "enum ProjectY.InstallmentPlan",
              "name": "installment",
              "type": "uint8"
            }
          ],
          "internalType": "struct ProjectY.SellerInfo[]",
          "name": "nftsOpenForSale_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        }
      ],
      "name": "getSellerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "onSale",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "sellerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "installmentsPaid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "paymentsClaimed",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellingPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBids",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "selectedBidId",
              "type": "uint256"
            },
            {
              "internalType": "enum ProjectY.InstallmentPlan",
              "name": "installment",
              "type": "uint8"
            }
          ],
          "internalType": "struct ProjectY.SellerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBidIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalEntryIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "getUserNFTsOpenForSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "onSale",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "sellerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "installmentsPaid",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "paymentsClaimed",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellingPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBids",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "selectedBidId",
              "type": "uint256"
            },
            {
              "internalType": "enum ProjectY.InstallmentPlan",
              "name": "installment",
              "type": "uint8"
            }
          ],
          "internalType": "struct ProjectY.SellerInfo[]",
          "name": "userNFTsOpenForSale_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gracePeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "name": "isBidIdValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        }
      ],
      "name": "isEntryIdValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        }
      ],
      "name": "payInstallment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "name": "selectBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellingPrice_",
          "type": "uint256"
        },
        {
          "internalType": "enum ProjectY.InstallmentPlan",
          "name": "installment_",
          "type": "uint8"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "biddingPeriod_",
          "type": "uint64"
        }
      ],
      "name": "setBiddingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "gracePeriod_",
          "type": "uint64"
        }
      ],
      "name": "setGracePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "name": "withdrawBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        }
      ],
      "name": "withdrawPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x07b39d991f9b102a8cb95a302774d85265744abcaeb0759311b4089ee85253ae",
  "receipt": {
    "to": null,
    "from": "0xde43f899587aaa2Ea6aD243F3d68a5027F2C6a94",
    "contractAddress": "0x8c974Dc6e834CDe3b9ce1BbC39B5577D00eDe067",
    "transactionIndex": 13,
    "gasUsed": "2708789",
    "logsBloom": "0x
    "blockHash": "0x733fd1f3e53a35fb6fd0f95508aca4c211279e46b9663ad9877fccc3189253e4",
    "transactionHash": "0x07b39d991f9b102a8cb95a302774d85265744abcaeb0759311b4089ee85253ae",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 11091669,
        "transactionHash": "0x07b39d991f9b102a8cb95a302774d85265744abcaeb0759311b4089ee85253ae",
        "address": "0x8c974Dc6e834CDe3b9ce1BbC39B5577D00eDe067",
        "topics": [
          "0x8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000de43f899587aaa2ea6ad243f3d68a5027f2c6a94"
        ],
        "data": "0x",
        "logIndex": 18,
        "blockHash": "0x733fd1f3e53a35fb6fd0f95508aca4c211279e46b9663ad9877fccc3189253e4"
      }
    ],
    "blockNumber": 11091669,
    "cumulativeGasUsed": "7206193",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xde43f899587aaa2Ea6aD243F3d68a5027F2C6a94"
  ],
  "numDeployments": 7,
  "solcInputHash": "bd650471a4fd61322c52d5637e96b925",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"}],\"name\":\"BidSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_MONTH\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice_\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"installment_\",\"type\":\"uint8\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biddingPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryId\",\"type\":\"uint256\"}],\"name\":\"getAllBidsOnNFT\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSelected\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"bidInstallment\",\"type\":\"uint8\"}],\"internalType\":\"struct ProjectY.BuyerInfo[]\",\"name\":\"allBidsOnNFT_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"name\":\"getBuyerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSelected\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"bidInstallment\",\"type\":\"uint8\"}],\"internalType\":\"struct ProjectY.BuyerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"name\":\"getDownPaymentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"installmentNumber_\",\"type\":\"uint256\"}],\"name\":\"getInstallmentAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"}],\"name\":\"getInstallmentAmountPerMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"installmentNumber_\",\"type\":\"uint64\"}],\"name\":\"getInstallmentMonthTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTsOpenForSale\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"onSale\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"installmentsPaid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"paymentsClaimed\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selectedBidId\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"installment\",\"type\":\"uint8\"}],\"internalType\":\"struct ProjectY.SellerInfo[]\",\"name\":\"nftsOpenForSale_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"}],\"name\":\"getSellerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"onSale\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"installmentsPaid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"paymentsClaimed\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selectedBidId\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"installment\",\"type\":\"uint8\"}],\"internalType\":\"struct ProjectY.SellerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBidIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEntryIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUserNFTsOpenForSale\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"onSale\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"installmentsPaid\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"paymentsClaimed\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selectedBidId\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"installment\",\"type\":\"uint8\"}],\"internalType\":\"struct ProjectY.SellerInfo[]\",\"name\":\"userNFTsOpenForSale_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"name\":\"isBidIdValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"}],\"name\":\"isEntryIdValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"}],\"name\":\"payInstallment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"name\":\"selectBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellingPrice_\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"installment_\",\"type\":\"uint8\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"biddingPeriod_\",\"type\":\"uint64\"}],\"name\":\"setBiddingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"gracePeriod_\",\"type\":\"uint64\"}],\"name\":\"setGracePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"}],\"name\":\"withdrawPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProjectY.sol\":\"ProjectY\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnerUpdated(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setOwner(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7e91c80b0dd1a14a19cb9e661b99924043adab6d9d893bbfcf3a6a3dc23a6743\",\"license\":\"AGPL-3.0-only\"},\"contracts/ProjectY.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@rari-capital/solmate/src/auth/Owned.sol\\\";\\n\\n\\n\\ncontract ProjectY is Context, Owned, ERC721Holder {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _entryIdTracker;\\n    Counters.Counter private _bidIdTracker;\\n\\n    uint64 public constant ONE_MONTH = 30 days;\\n\\n    uint64 public biddingPeriod = 7 days;\\n    uint64 public gracePeriod = 7 days;\\n\\n    enum InstallmentPlan {\\n        None, // no installment\\n        ThreeMonths,\\n        SixMonths,\\n        NineMonths\\n    }\\n\\n    struct SellerInfo {\\n        bool onSale;\\n        address sellerAddress;\\n        address contractAddress;\\n        uint8 installmentsPaid;\\n        uint8 paymentsClaimed;\\n        uint64 timestamp;\\n        uint256 tokenId;\\n        uint256 sellingPrice;\\n        uint256 totalBids;\\n        uint256 selectedBidId;\\n        InstallmentPlan installment;\\n    }\\n\\n    struct BuyerInfo {\\n        bool isSelected;\\n        address buyerAddress;\\n        uint64 timestamp;\\n        uint256 bidPrice;\\n        uint256 entryId;\\n        uint256 pricePaid; // initially equal to downpayment\\n        InstallmentPlan bidInstallment;\\n    }\\n\\n    // entryId -> SellerInfo\\n    mapping(uint256 => SellerInfo) internal _sellerInfo;\\n\\n    // bidId -> BuyerInfo\\n    mapping(uint256 => BuyerInfo) internal _buyerInfo;\\n\\n    event Sell(\\n        address indexed seller,\\n        address indexed contractAddress,\\n        uint256 tokenId,\\n        uint256 indexed entryId,\\n        uint64 timestamp\\n    );\\n\\n    event Bid(\\n        address indexed buyer,\\n        uint256 indexed entryId,\\n        uint256 indexed bidId,\\n        uint64 timestamp\\n    );\\n\\n    event BidSelected(uint256 indexed bidId, uint256 indexed entryId);\\n\\n    constructor(address owner_) Owned(owner_) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    // some additional getters for front-end start\\n\\n    function getNFTsOpenForSale() public view returns (SellerInfo[] memory nftsOpenForSale_) {\\n        uint256 totalEntryIds_ = getTotalEntryIds();\\n        nftsOpenForSale_ = new SellerInfo[](totalEntryIds_);\\n\\n        // Storing this outside the loop saves gas per iteration.\\n        SellerInfo memory sellerInfo_;\\n\\n        for (uint256 i_; i_ < totalEntryIds_; ) {\\n            sellerInfo_ = _sellerInfo[i_ + 1];\\n\\n            if (sellerInfo_.onSale) {\\n                nftsOpenForSale_[i_] = sellerInfo_;\\n            }\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i_;\\n            }\\n        }\\n\\n        return nftsOpenForSale_;\\n    }\\n\\n    function getAllBidsOnNFT(uint256 _entryId)\\n        public\\n        view\\n        returns (BuyerInfo[] memory allBidsOnNFT_)\\n    {\\n        uint256 totalBidIds_ = getTotalBidIds();\\n        allBidsOnNFT_ = new BuyerInfo[](totalBidIds_);\\n\\n        for (uint256 i_ = 0; i_ < totalBidIds_; ) {\\n            if (_buyerInfo[i_].entryId == _entryId) {\\n                allBidsOnNFT_[i_] = _buyerInfo[i_ + 1];\\n            }\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i_;\\n            }\\n        }\\n    }\\n\\n    function getUserNFTsOpenForSale(address user_)\\n        public\\n        view\\n        returns (SellerInfo[] memory userNFTsOpenForSale_)\\n    {\\n        uint256 totalEntryIds_ = getTotalEntryIds();\\n        userNFTsOpenForSale_ = new SellerInfo[](totalEntryIds_);\\n\\n        // Storing this outside the loop saves gas per iteration.\\n        SellerInfo memory sellerInfo_;\\n\\n        for (uint256 i_ = 0; i_ < totalEntryIds_; ) {\\n            sellerInfo_ = _sellerInfo[i_ + 1];\\n\\n            if (sellerInfo_.onSale && sellerInfo_.sellerAddress == user_) {\\n                userNFTsOpenForSale_[i_] = sellerInfo_;\\n            }\\n\\n            // An array can't have a total length\\n            // larger than the max uint256 value.\\n            unchecked {\\n                ++i_;\\n            }\\n        }\\n    }\\n\\n    // some additional getters for front-end end\\n\\n    function isEntryIdValid(uint256 entryId_) public view returns (bool isValid_) {\\n        require(isValid_ = (_sellerInfo[entryId_].sellerAddress != address(0)), \\\"INVALID_ENTRY_ID\\\");\\n    }\\n\\n    function isBidIdValid(uint256 bidId_) public view returns (bool isValid_) {\\n        require(isValid_ = (_buyerInfo[bidId_].buyerAddress != address(0)), \\\"INVALID_BID_ID\\\");\\n    }\\n\\n    function getSellerInfo(uint256 entryId_) public view returns (SellerInfo memory) {\\n        isEntryIdValid(entryId_);\\n        return _sellerInfo[entryId_];\\n    }\\n\\n    function getBuyerInfo(uint256 bidId_) public view returns (BuyerInfo memory) {\\n        isBidIdValid(bidId_);\\n        return _buyerInfo[bidId_];\\n    }\\n\\n    function getTotalEntryIds() public view returns (uint256) {\\n        return _entryIdTracker.current();\\n    }\\n\\n    function getTotalBidIds() public view returns (uint256) {\\n        return _bidIdTracker.current();\\n    }\\n\\n    function getDownPaymentAmount(uint256 entryId_, uint256 bidId_) public view returns (uint256) {\\n        isEntryIdValid(entryId_);\\n        isBidIdValid(bidId_);\\n\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        require(buyerInfo_.pricePaid == 0, \\\"DOWN_PAYMENT_DONE\\\");\\n\\n        InstallmentPlan installment_ = buyerInfo_.bidInstallment;\\n        uint256 bidPrice_ = buyerInfo_.bidPrice;\\n\\n        if (installment_ == InstallmentPlan.ThreeMonths) {\\n            return (bidPrice_ * 34) / 100; // 34%\\n        } else if (installment_ == InstallmentPlan.SixMonths) {\\n            return (bidPrice_ * 175) / 1000; // 17.5%\\n        } else if (installment_ == InstallmentPlan.NineMonths) {\\n            return (bidPrice_ * 12) / 100; // 12%\\n        } else {\\n            return bidPrice_; // InstallmentPlan.None\\n        }\\n    }\\n\\n    function getInstallmentAmountPerMonth(uint256 entryId_) public view returns (uint256) {\\n        isEntryIdValid(entryId_);\\n        SellerInfo memory sellerInfo_ = _sellerInfo[entryId_];\\n\\n        uint256 bidId_ = sellerInfo_.selectedBidId;\\n        isBidIdValid(bidId_);\\n\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        InstallmentPlan installment_ = buyerInfo_.bidInstallment;\\n\\n        if (buyerInfo_.bidPrice == buyerInfo_.pricePaid) {\\n            return 0;\\n        }\\n\\n        if (installment_ == InstallmentPlan.ThreeMonths) {\\n            return (buyerInfo_.bidPrice * 33) / 100; // 33%\\n        } else if (installment_ == InstallmentPlan.SixMonths) {\\n            return (buyerInfo_.bidPrice * 165) / 1000; // 16.5%\\n        } else if (installment_ == InstallmentPlan.NineMonths) {\\n            return (buyerInfo_.bidPrice * 11) / 100; // 11%\\n        } else {\\n            return 0; // InstallmentPlan.None\\n        }\\n    }\\n\\n    // get installment amount of specific installment number\\n    function getInstallmentAmountOf(\\n        uint256 entryId_,\\n        uint256 bidId_,\\n        uint256 installmentNumber_\\n    ) public view returns (uint256) {\\n        // if first installment number is 1 then it means it's downpayment\\n        if (installmentNumber_ == 1) {\\n            return getDownPaymentAmount(entryId_, bidId_);\\n        }\\n\\n        return installmentNumber_ * getInstallmentAmountPerMonth(entryId_);\\n    }\\n\\n    function getInstallmentMonthTimestamp(uint256 bidId_, uint64 installmentNumber_)\\n        public\\n        view\\n        returns (uint64)\\n    {\\n        return _buyerInfo[bidId_].timestamp + ((installmentNumber_ - 1) * ONE_MONTH);\\n    }\\n\\n    function sell(\\n        address contractAddress_,\\n        uint256 tokenId_,\\n        uint256 sellingPrice_,\\n        InstallmentPlan installment_\\n    ) public returns (uint256) {\\n        require(sellingPrice_ != 0, \\\"INVALID_PRICE\\\");\\n\\n        uint64 blockTimestamp_ = uint64(block.timestamp);\\n\\n        // create unique entryId\\n        _entryIdTracker.increment();\\n        uint256 entryId_ = _entryIdTracker.current();\\n\\n        // transfer NFT to this contract\\n        IERC721(contractAddress_).safeTransferFrom(_msgSender(), address(this), tokenId_);\\n\\n        // update mapping\\n        _sellerInfo[entryId_].onSale = true;\\n        _sellerInfo[entryId_].sellerAddress = _msgSender();\\n        _sellerInfo[entryId_].contractAddress = contractAddress_;\\n        _sellerInfo[entryId_].timestamp = blockTimestamp_;\\n        _sellerInfo[entryId_].tokenId = tokenId_;\\n        _sellerInfo[entryId_].sellingPrice = sellingPrice_;\\n        _sellerInfo[entryId_].installment = installment_;\\n\\n        emit Sell(_msgSender(), contractAddress_, tokenId_, entryId_, blockTimestamp_);\\n        return entryId_;\\n    }\\n\\n    function bid(\\n        uint256 entryId_,\\n        uint256 bidPrice_,\\n        InstallmentPlan installment_\\n    ) public payable returns (uint256) {\\n        uint256 value_ = msg.value;\\n        uint64 blockTimestamp_ = uint64(block.timestamp);\\n\\n        // create unique bidId\\n        _bidIdTracker.increment();\\n        uint256 bidId_ = _bidIdTracker.current();\\n\\n        // update buyer address so that bid id gets validated\\n        _buyerInfo[bidId_].buyerAddress = _msgSender();\\n\\n        uint256 downPayment_ = getDownPaymentAmount(entryId_, bidId_);\\n\\n        require(value_ != 0 && value_ == downPayment_, \\\"VALUE_NOT_EQUAL_TO_DOWN_PAYMENT\\\");\\n\\n        require(\\n            blockTimestamp_ <= _sellerInfo[entryId_].timestamp + biddingPeriod,\\n            \\\"BIDDING_PERIOD_OVER\\\"\\n        );\\n\\n        // update buyer info mapping\\n        _buyerInfo[bidId_].timestamp = blockTimestamp_;\\n        _buyerInfo[bidId_].bidPrice = bidPrice_;\\n        _buyerInfo[bidId_].entryId = entryId_;\\n        _buyerInfo[bidId_].pricePaid = value_;\\n        _buyerInfo[bidId_].bidInstallment = installment_;\\n\\n        _sellerInfo[entryId_].totalBids += 1;\\n\\n        emit Bid(_msgSender(), entryId_, bidId_, blockTimestamp_);\\n        return bidId_;\\n    }\\n\\n    function selectBid(uint256 bidId_) public {\\n        uint64 blockTimestamp_ = uint64(block.timestamp);\\n        isBidIdValid(bidId_);\\n\\n        uint256 entryId_ = _buyerInfo[bidId_].entryId;\\n        isEntryIdValid(entryId_);\\n\\n        SellerInfo memory sellerInfo_ = _sellerInfo[entryId_];\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        require(_msgSender() == sellerInfo_.sellerAddress, \\\"CALLER_NOT_SELLER\\\");\\n        require(\\n            blockTimestamp_ >= sellerInfo_.timestamp + biddingPeriod,\\n            \\\"BIDDING_PERIOD_NOT_OVER\\\"\\n        );\\n        require(sellerInfo_.selectedBidId == 0, \\\"CANNOT_RESELECT_BID\\\");\\n\\n        // if installment plan is none so transfer the nft on selection of bid\\n        if (buyerInfo_.bidInstallment == InstallmentPlan.None) {\\n            IERC721(sellerInfo_.contractAddress).safeTransferFrom(\\n                address(this),\\n                buyerInfo_.buyerAddress,\\n                sellerInfo_.tokenId\\n            );\\n\\n            // delete seller\\n            delete _sellerInfo[entryId_];\\n            // delete bid\\n            delete _buyerInfo[bidId_];\\n        } else {\\n            // update buyer info\\n            _buyerInfo[bidId_].isSelected = true;\\n            _buyerInfo[bidId_].timestamp = blockTimestamp_;\\n\\n            // make NFT onSale off and set selected bidId\\n            _sellerInfo[entryId_].onSale = false;\\n            _sellerInfo[entryId_].selectedBidId = bidId_;\\n\\n            _sellerInfo[entryId_].installment = buyerInfo_.bidInstallment;\\n            _sellerInfo[entryId_].sellingPrice = buyerInfo_.bidPrice;\\n            _sellerInfo[entryId_].installmentsPaid = 1;\\n        }\\n\\n        emit BidSelected(bidId_, entryId_);\\n    }\\n\\n    function payInstallment(uint256 entryId_) public payable {\\n        uint256 value_ = msg.value;\\n\\n        isEntryIdValid(entryId_);\\n\\n        uint256 bidId_ = _sellerInfo[entryId_].selectedBidId;\\n        isBidIdValid(bidId_);\\n\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        require(buyerInfo_.buyerAddress == _msgSender(), \\\"CALLER_NOT_BUYER\\\");\\n\\n        uint256 bidPrice_ = buyerInfo_.bidPrice;\\n        uint256 pricePaid_ = buyerInfo_.pricePaid;\\n\\n        if (bidPrice_ != pricePaid_) {\\n            uint256 installmentPayment_ = getInstallmentAmountPerMonth(entryId_);\\n\\n            require(installmentPayment_ == value_ && value_ != 0, \\\"INVALID_INSTALLMENT_VALUE\\\");\\n\\n            _buyerInfo[bidId_].pricePaid += value_;\\n            _sellerInfo[entryId_].installmentsPaid++;\\n        }\\n\\n        // all installments done so transfer NFT to buyer\\n        if (bidPrice_ == pricePaid_) {\\n            IERC721(_sellerInfo[entryId_].contractAddress).safeTransferFrom(\\n                address(this),\\n                _msgSender(),\\n                _sellerInfo[entryId_].tokenId\\n            );\\n\\n            // delete seller\\n            delete _sellerInfo[entryId_];\\n            // delete bid\\n            delete _buyerInfo[bidId_];\\n        }\\n    }\\n\\n    function withdrawBid(uint256 bidId_) public {\\n        isBidIdValid(bidId_);\\n\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        uint256 entryId_ = buyerInfo_.entryId;\\n\\n        require(\\n            uint64(block.timestamp) >= _sellerInfo[entryId_].timestamp + biddingPeriod,\\n            \\\"BIDDING_PERIOD_NOT_OVER\\\"\\n        );\\n        require(!buyerInfo_.isSelected, \\\"BIDDER_SHOULD_NOT_BE_SELECTED\\\");\\n        require(_msgSender() == buyerInfo_.buyerAddress, \\\"CALLER_NOT_BUYER\\\");\\n\\n        // delete bid\\n        delete _buyerInfo[bidId_];\\n\\n        // return the price paid\\n        Address.sendValue(payable(buyerInfo_.buyerAddress), buyerInfo_.pricePaid);\\n    }\\n\\n    function withdrawPayment(uint256 entryId_) public {\\n        isEntryIdValid(entryId_);\\n        SellerInfo memory sellerInfo_ = _sellerInfo[entryId_];\\n        isBidIdValid(sellerInfo_.selectedBidId);\\n\\n        require(_msgSender() == sellerInfo_.sellerAddress, \\\"CALLER_NOT_SELLER\\\");\\n        require(sellerInfo_.paymentsClaimed != 0, \\\"NO_PAYMENT_AVAILABLE\\\");\\n\\n        uint8 secondLastInstallmentPaid_ = sellerInfo_.installmentsPaid - 1;\\n\\n        // payments claimed should be one less than installmentsPaid\\n        // no other check required as installmentsPaid will increase after a month\\n        require(\\n            sellerInfo_.paymentsClaimed == secondLastInstallmentPaid_,\\n            \\\"CANNOT_RECLAIM_PAYMENT\\\"\\n        );\\n\\n        // if installmentsPaid is 5 that means payments of 5 months is done\\n        // so unlock payment of 4 to seller\\n        uint256 secondLastInstallmentAmount_ = getInstallmentAmountOf(\\n            entryId_,\\n            sellerInfo_.selectedBidId,\\n            secondLastInstallmentPaid_\\n        );\\n\\n        // update paymentsClaimed\\n        _sellerInfo[entryId_].paymentsClaimed++;\\n\\n        // transfer amount to seller\\n        Address.sendValue(payable(sellerInfo_.sellerAddress), secondLastInstallmentAmount_);\\n    }\\n\\n    function liquidate(uint256 entryId_) public payable {\\n        uint256 value_ = msg.value;\\n\\n        isEntryIdValid(entryId_);\\n        SellerInfo memory sellerInfo_ = _sellerInfo[entryId_];\\n\\n        uint256 bidId_ = sellerInfo_.selectedBidId;\\n        isBidIdValid(bidId_);\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        uint256 installmentPerMonth_ = getInstallmentAmountPerMonth(entryId_);\\n\\n        // None or Installments paid\\n        require(\\n            installmentPerMonth_ != 0 || (buyerInfo_.bidPrice == buyerInfo_.pricePaid),\\n            \\\"NO_INSTALLMENT_LEFT\\\"\\n        );\\n\\n        // get timestamp of next payment\\n        uint256 installmentMonthTimestamp_ = getInstallmentMonthTimestamp(\\n            bidId_,\\n            sellerInfo_.installmentsPaid + 1\\n        );\\n\\n        // if timestamp of next payment + gracePeriod is passed then liquidate otherwise stop execution\\n        require(\\n            uint64(block.timestamp) > (installmentMonthTimestamp_ + gracePeriod),\\n            \\\"INSTALLMENT_ON_TRACK\\\"\\n        );\\n\\n        address oldbuyer_ = buyerInfo_.buyerAddress;\\n        uint256 priceToBePaidByLiquidator_ = (buyerInfo_.pricePaid * 95) / 100;\\n\\n        require(priceToBePaidByLiquidator_ == value_, \\\"INVALID_LIQUIDATION_VALUE\\\");\\n\\n        // update new buyer\\n        _buyerInfo[bidId_].buyerAddress = _msgSender();\\n\\n        // transfer 95% of pricePaid to old buyer\\n        Address.sendValue(payable(oldbuyer_), priceToBePaidByLiquidator_);\\n    }\\n\\n    function setBiddingPeriod(uint64 biddingPeriod_) public onlyOwner {\\n        require(biddingPeriod_ != 0, \\\"INVALID_BIDDING_PERIOD\\\");\\n        biddingPeriod = biddingPeriod_;\\n    }\\n\\n    function setGracePeriod(uint64 gracePeriod_) public onlyOwner {\\n        require(gracePeriod_ != 0, \\\"INVALID_GRACE_PERIOD\\\");\\n        gracePeriod = gracePeriod_;\\n    }\\n}\\n\",\"keccak256\":\"0x032b05f67753f19bf1fc969c5e21f3f3cc7d63e00c45333b82a6824171518eb5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c80637b4ed024116100ec578063dbd3cd621161008a578063f8de03ac11610064578063f8de03ac14610542578063f9fb2f0814610555578063fd5f0a251461056a578063fdcd2b871461058a57600080fd5b8063dbd3cd62146104ef578063e2f8a0171461050f578063e380dbd31461052257600080fd5b8063a06db7dc116100c6578063a06db7dc1461045b578063a7d53ac314610482578063b460b1df146104a2578063cdd265c3146104c257600080fd5b80637b4ed024146103d65780638da5cb5b14610403578063985937f51461043b57600080fd5b806350212e75116101595780635d21d50c116101335780635d21d50c146103545780635f8909bd14610381578063643164c2146103a157806366da4011146103c157600080fd5b806350212e75146102e757806355a5133b146103075780635aee87031461032757600080fd5b806320988cef1161019557806320988cef14610247578063415f12401461027657806341cb961a1461028957806345806097146102b757600080fd5b80630eaaf4c8146101bc57806313af4035146101de578063150b7a02146101fe575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004612911565b61059f565b005b3480156101ea57600080fd5b506101dc6101f9366004612941565b6107e6565b34801561020a57600080fd5b50610229610219366004612972565b630a85bd0160e11b949350505050565b6040516001600160e01b031990911681526020015b60405180910390f35b34801561025357600080fd5b5061025e62278d0081565b6040516001600160401b03909116815260200161023e565b6101dc610284366004612911565b61085b565b34801561029557600080fd5b506102a96102a4366004612911565b610b9d565b60405190815260200161023e565b3480156102c357600080fd5b506102d76102d2366004612911565b610e06565b604051901515815260200161023e565b3480156102f357600080fd5b506102a9610302366004612a4d565b610e68565b34801561031357600080fd5b506101dc610322366004612a86565b61100a565b34801561033357600080fd5b50610347610342366004612911565b6110b6565b60405161023e9190612b34565b34801561036057600080fd5b5061037461036f366004612911565b6111a4565b60405161023e9190612b42565b34801561038d57600080fd5b5060035461025e906001600160401b031681565b3480156103ad57600080fd5b5061025e6103bc366004612b90565b611340565b3480156103cd57600080fd5b506102a961138b565b3480156103e257600080fd5b506103f66103f1366004612941565b61139b565b60405161023e9190612c7c565b34801561040f57600080fd5b50600054610423906001600160a01b031681565b6040516001600160a01b03909116815260200161023e565b34801561044757600080fd5b506102d7610456366004612911565b61155b565b34801561046757600080fd5b5060035461025e90600160401b90046001600160401b031681565b34801561048e57600080fd5b506101dc61049d366004612911565b6115ba565b3480156104ae57600080fd5b506102a96104bd366004612cbf565b611a97565b3480156104ce57600080fd5b506104e26104dd366004612911565b611acd565b60405161023e9190612ceb565b3480156104fb57600080fd5b506101dc61050a366004612911565b611bac565b6101dc61051d366004612911565b611e23565b34801561052e57600080fd5b506101dc61053d366004612a86565b612147565b6102a9610550366004612d09565b6121e6565b34801561056157600080fd5b506102a96123fd565b34801561057657600080fd5b506102a9610585366004612d3e565b612408565b34801561059657600080fd5b506103f6612601565b6105a881610e06565b506000818152600560209081526040808320815160e081018352815460ff8082161515835261010082046001600160a01b031695830195909552600160a81b90046001600160401b031692810192909252600181015460608301526002810154608083015260038082015460a084015260048201549293919260c0850192169081111561063757610637612aa1565b600381111561064857610648612aa1565b90525060808101516003546000828152600460205260409020600101549293509091610687916001600160401b0390811691600160b01b900416612d9a565b6001600160401b0316426001600160401b031610156106e75760405162461bcd60e51b81526020600482015260176024820152762124a22224a723afa822a924a7a22fa727aa2fa7ab22a960491b60448201526064015b60405180910390fd5b8151156107365760405162461bcd60e51b815260206004820152601d60248201527f4249444445525f53484f554c445f4e4f545f42455f53454c454354454400000060448201526064016106de565b60208201516001600160a01b0316336001600160a01b03161461078e5760405162461bcd60e51b815260206004820152601060248201526f21a0a62622a92fa727aa2fa12aaca2a960811b60448201526064016106de565b6000838152600560209081526040822080546001600160e81b0319168155600181018390556002810183905560038101929092556004909101805460ff1916905582015160a08301516107e1919061279e565b505050565b6000546001600160a01b031633146108105760405162461bcd60e51b81526004016106de90612dc5565b600080546001600160a01b0319166001600160a01b0383169081178255604051909133917f8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d769190a350565b346108658261155b565b506000828152600460208181526040808420815161016081018352815460ff80821615158352610100918290046001600160a01b0390811696840196909652600184015495861694830194909452600160a01b850484166060830152600160a81b850484166080830152600160b01b9094046001600160401b031660a0820152600282015460c082015260038083015460e083015294820154938101939093526005810154610120840152600681015492939092610140850192169081111561093057610930612aa1565b600381111561094157610941612aa1565b90525061012081015190915061095681610e06565b506000818152600560209081526040808320815160e081018352815460ff8082161515835261010082046001600160a01b031695830195909552600160a81b90046001600160401b031692810192909252600181015460608301526002810154608083015260038082015460a084015260048201549293919260c085019216908111156109e5576109e5612aa1565b60038111156109f6576109f6612aa1565b90525090506000610a0686610b9d565b905080151580610a1d57508160a001518260600151145b610a5f5760405162461bcd60e51b81526020600482015260136024820152721393d7d25394d51053131351539517d3115195606a1b60448201526064016106de565b6000610a7e8486606001516001610a769190612deb565b60ff16611340565b6003546001600160401b039182169250610aa191600160401b9091041682612e10565b426001600160401b031611610aef5760405162461bcd60e51b8152602060048201526014602482015273494e5354414c4c4d454e545f4f4e5f545241434b60601b60448201526064016106de565b602083015160a0840151600090606490610b0a90605f612e28565b610b149190612e47565b9050878114610b655760405162461bcd60e51b815260206004820152601960248201527f494e56414c49445f4c49515549444154494f4e5f56414c55450000000000000060448201526064016106de565b60008681526005602052604090208054610100600160a81b0319166101003302179055610b92828261279e565b505050505050505050565b6000610ba88261155b565b506000828152600460208181526040808420815161016081018352815460ff80821615158352610100918290046001600160a01b0390811696840196909652600184015495861694830194909452600160a01b850484166060830152600160a81b850484166080830152600160b01b9094046001600160401b031660a0820152600282015460c082015260038083015460e0830152948201549381019390935260058101546101208401526006810154929390926101408501921690811115610c7357610c73612aa1565b6003811115610c8457610c84612aa1565b905250610120810151909150610c9981610e06565b506000818152600560209081526040808320815160e081018352815460ff8082161515835261010082046001600160a01b031695830195909552600160a81b90046001600160401b031692810192909252600181015460608301526002810154608083015260038082015460a084015260048201549293919260c08501921690811115610d2857610d28612aa1565b6003811115610d3957610d39612aa1565b90525060c081015160a08201516060830151929350909103610d615750600095945050505050565b6001816003811115610d7557610d75612aa1565b03610da157606482606001516021610d8d9190612e28565b610d979190612e47565b9695505050505050565b6002816003811115610db557610db5612aa1565b03610dce576103e8826060015160a5610d8d9190612e28565b6003816003811115610de257610de2612aa1565b03610dfa5760648260600151600b610d8d9190612e28565b50600095945050505050565b60008181526005602052604090205461010090046001600160a01b0316151580610e635760405162461bcd60e51b815260206004820152600e60248201526d1253959053125117d0925117d25160921b60448201526064016106de565b919050565b6000610e738361155b565b50610e7d82610e06565b506000828152600560209081526040808320815160e081018352815460ff8082161515835261010082046001600160a01b031695830195909552600160a81b90046001600160401b031692810192909252600181015460608301526002810154608083015260038082015460a084015260048201549293919260c08501921690811115610f0c57610f0c612aa1565b6003811115610f1d57610f1d612aa1565b90525060a081015190915015610f695760405162461bcd60e51b8152602060048201526011602482015270444f574e5f5041594d454e545f444f4e4560781b60448201526064016106de565b60c081015160608201516001826003811115610f8757610f87612aa1565b03610fad576064610f99826022612e28565b610fa39190612e47565b9350505050611004565b6002826003811115610fc157610fc1612aa1565b03610fd4576103e8610f998260af612e28565b6003826003811115610fe857610fe8612aa1565b03610ffa576064610f9982600c612e28565b9250611004915050565b92915050565b6000546001600160a01b031633146110345760405162461bcd60e51b81526004016106de90612dc5565b806001600160401b03166000036110845760405162461bcd60e51b81526020600482015260146024820152731253959053125117d1d49050d157d411549253d160621b60448201526064016106de565b600380546001600160401b03909216600160401b026fffffffffffffffff000000000000000019909216919091179055565b6110f36040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529060c082015290565b6110fc82610e06565b50600082815260056020908152604091829020825160e081018452815460ff8082161515835261010082046001600160a01b031694830194909452600160a81b90046001600160401b031693810193909352600181015460608401526002810154608084015260038082015460a08501526004820154919260c0850192169081111561118a5761118a612aa1565b600381111561119b5761119b612aa1565b90525092915050565b606060006111b06123fd565b9050806001600160401b038111156111ca576111ca61295c565b60405190808252806020026020018201604052801561123857816020015b6112256040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a081018290529060c082015290565b8152602001906001900390816111e85790505b50915060005b8181101561133957600081815260056020526040902060020154849003611331576005600061126e836001612e10565b81526020808201929092526040908101600020815160e081018352815460ff8082161515835261010082046001600160a01b031695830195909552600160a81b90046001600160401b031692810192909252600181015460608301526002810154608083015260038082015460a084015260048201549293919260c085019216908111156112fe576112fe612aa1565b600381111561130f5761130f612aa1565b8152505083828151811061132557611325612e69565b60200260200101819052505b60010161123e565b5050919050565b600062278d00611351600184612e7f565b61135b9190612ea7565b6000848152600560205260409020546113849190600160a81b90046001600160401b0316612d9a565b9392505050565b600061139660015490565b905090565b606060006113a761138b565b9050806001600160401b038111156113c1576113c161295c565b6040519080825280602002602001820160405280156113fa57816020015b6113e76128b7565b8152602001906001900390816113df5790505b5091506114056128b7565b60005b82811015611553576004600061141f836001612e10565b81526020808201929092526040908101600020815161016081018352815460ff80821615158352610100918290046001600160a01b0390811696840196909652600184015495861694830194909452600160a01b850484166060830152600160a81b850484166080830152600160b01b9094046001600160401b031660a0820152600282015460c082015260038083015460e083015260048301549482019490945260058201546101208201526006820154909391926101408501929116908111156114ed576114ed612aa1565b60038111156114fe576114fe612aa1565b905250805190925080156115275750846001600160a01b031682602001516001600160a01b0316145b1561154b578184828151811061153f5761153f612e69565b60200260200101819052505b600101611408565b505050919050565b60008181526004602052604090205461010090046001600160a01b0316151580610e635760405162461bcd60e51b815260206004820152601060248201526f1253959053125117d15395149657d25160821b60448201526064016106de565b426115c482610e06565b506000828152600560205260409020600201546115e08161155b565b506000818152600460208181526040808420815161016081018352815460ff80821615158352610100918290046001600160a01b0390811696840196909652600184015495861694830194909452600160a01b850484166060830152600160a81b850484166080830152600160b01b9094046001600160401b031660a0820152600282015460c082015260038083015460e08301529482015493810193909352600581015461012084015260068101549293909261014085019216908111156116ab576116ab612aa1565b60038111156116bc576116bc612aa1565b9052506000858152600560209081526040808320815160e081018352815460ff8082161515835261010082046001600160a01b031695830195909552600160a81b90046001600160401b031692810192909252600181015460608301526002810154608083015260038082015460a0840152600482015495965093949193909260c0850192169081111561175257611752612aa1565b600381111561176357611763612aa1565b90525060208301519091506001600160a01b0316336001600160a01b0316146117c25760405162461bcd60e51b815260206004820152601160248201527021a0a62622a92fa727aa2fa9a2a62622a960791b60448201526064016106de565b60035460a08301516117dd916001600160401b031690612d9a565b6001600160401b0316846001600160401b031610156118385760405162461bcd60e51b81526020600482015260176024820152762124a22224a723afa822a924a7a22fa727aa2fa7ab22a960491b60448201526064016106de565b610120820151156118815760405162461bcd60e51b815260206004820152601360248201527210d0539393d517d49154d1531150d517d09251606a1b60448201526064016106de565b60008160c00151600381111561189957611899612aa1565b036119ae57604080830151602083015160c08501519251632142170760e11b81523060048201526001600160a01b039182166024820152604481019390935216906342842e0e90606401600060405180830381600087803b1580156118fd57600080fd5b505af1158015611911573d6000803e3d6000fd5b505050600084815260046020818152604080842080546001600160a81b0319168155600180820180546001600160f01b03191690556002808301879055600380840188905583870188905560058085018990556006909401805460ff199081169091558e89529390955292862080546001600160e81b03191681559081018690559182018590559181019390935591018054909116905550611a63565b60008581526005602081815260408084208054600160ff67ffffffffffffffff60a81b0119909116600160a81b6001600160401b038c16021781179091558785526004909252909220805460ff19908116825591810188905560c084015160069091018054919390929190911690836003811115611a2e57611a2e612aa1565b0217905550606081015160008481526004602052604090206003810191909155600101805460ff60a01b1916600160a01b1790555b604051839086907f9295c82ed42927512117ef31a7c3fed86244add76abc91d00191ff9b37a7b8ea90600090a35050505050565b600081600103611ab257611aab8484610e68565b9050611384565b611abb84610b9d565b611ac59083612e28565b949350505050565b611ad56128b7565b611ade8261155b565b50600082815260046020818152604092839020835161016081018552815460ff80821615158352610100918290046001600160a01b0390811695840195909552600184015494851696830196909652600160a01b840486166060830152600160a81b840486166080830152600160b01b9093046001600160401b031660a0820152600282015460c082015260038083015460e0830152938201549281019290925260058101546101208301526006810154919390926101408501929091169081111561118a5761118a612aa1565b611bb58161155b565b506000818152600460208181526040808420815161016081018352815460ff80821615158352610100918290046001600160a01b0390811696840196909652600184015495861694830194909452600160a01b850484166060830152600160a81b850484166080830152600160b01b9094046001600160401b031660a0820152600282015460c082015260038083015460e0830152948201549381019390935260058101546101208401526006810154929390926101408501921690811115611c8057611c80612aa1565b6003811115611c9157611c91612aa1565b815250509050611ca5816101200151610e06565b5060208101516001600160a01b0316336001600160a01b031614611cff5760405162461bcd60e51b815260206004820152601160248201527021a0a62622a92fa727aa2fa9a2a62622a960791b60448201526064016106de565b806080015160ff16600003611d4d5760405162461bcd60e51b81526020600482015260146024820152734e4f5f5041594d454e545f415641494c41424c4560601b60448201526064016106de565b600060018260600151611d609190612ed6565b90508060ff16826080015160ff1614611db45760405162461bcd60e51b815260206004820152601660248201527510d0539393d517d49150d310525357d410565351539560521b60448201526064016106de565b6000611dc9848461012001518460ff16611a97565b60008581526004602052604090206001018054919250600160a81b90910460ff16906015611df683612ef9565b91906101000a81548160ff021916908360ff16021790555050611e1d83602001518261279e565b50505050565b34611e2d8261155b565b50600082815260046020526040902060050154611e4981610e06565b506000818152600560209081526040808320815160e081018352815460ff8082161515835261010082046001600160a01b031695830195909552600160a81b90046001600160401b031692810192909252600181015460608301526002810154608083015260038082015460a084015260048201549293919260c08501921690811115611ed857611ed8612aa1565b6003811115611ee957611ee9612aa1565b90525060208101519091506001600160a01b03163314611f3e5760405162461bcd60e51b815260206004820152601060248201526f21a0a62622a92fa727aa2fa12aaca2a960811b60448201526064016106de565b606081015160a0820151808214612020576000611f5a87610b9d565b90508581148015611f6a57508515155b611fb65760405162461bcd60e51b815260206004820152601960248201527f494e56414c49445f494e5354414c4c4d454e545f56414c55450000000000000060448201526064016106de565b60008581526005602052604081206003018054889290611fd7908490612e10565b909155505060008781526004602052604090206001018054600160a01b900460ff1690601461200583612ef9565b91906101000a81548160ff021916908360ff16021790555050505b80820361213f57600086815260046020819052604080832060018101546002909101548251632142170760e11b81523094810194909452336024850152604484015290516001600160a01b03909116926342842e0e926064808201939182900301818387803b15801561209257600080fd5b505af11580156120a6573d6000803e3d6000fd5b505050600087815260046020818152604080842080546001600160a81b0319168155600180820180546001600160f01b03191690556002808301879055600380840188905583870188905560058085018990556006909401805460ff199081169091558d89529390955292862080546001600160e81b031916815590810186905591820185905591810193909355910180549091169055505b505050505050565b6000546001600160a01b031633146121715760405162461bcd60e51b81526004016106de90612dc5565b806001600160401b03166000036121c35760405162461bcd60e51b81526020600482015260166024820152751253959053125117d0925111125391d7d411549253d160521b60448201526064016106de565b6003805467ffffffffffffffff19166001600160401b0392909216919091179055565b600034426121f8600280546001019055565b600061220360025490565b60008181526005602052604081208054610100600160a81b03191661010033021790559091506122338883610e68565b9050831580159061224357508084145b61228f5760405162461bcd60e51b815260206004820152601f60248201527f56414c55455f4e4f545f455155414c5f544f5f444f574e5f5041594d454e540060448201526064016106de565b6003546000898152600460205260409020600101546122c1916001600160401b0390811691600160b01b900416612d9a565b6001600160401b0316836001600160401b031611156123185760405162461bcd60e51b81526020600482015260136024820152722124a22224a723afa822a924a7a22fa7ab22a960691b60448201526064016106de565b6000828152600560205260409020805467ffffffffffffffff60a81b1916600160a81b6001600160401b038616021781556001808201899055600282018a90556003808301879055600490920180548993919260ff1990911691849081111561238357612383612aa1565b021790555060008881526004602081905260408220018054600192906123aa908490612e10565b9091555050604080516001600160401b0385168152905183918a9133917f5ab6bd288ed4e1289e3291c15622be6529f14e70b0a6e04a211ee938020c6dea919081900360200190a4509695505050505050565b600061139660025490565b60008260000361244a5760405162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f505249434560981b60448201526064016106de565b42612459600180546001019055565b600061246460015490565b90506001600160a01b0387166342842e0e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101899052606401600060405180830381600087803b1580156124c457600080fd5b505af11580156124d8573d6000803e3d6000fd5b5050506000828152600460205260409020805460ff19166001179055506124fc3390565b60008281526004602052604090208054610100600160a81b0319166101006001600160a01b039384160217815560018082018054938b167fffff0000000000000000ffff000000000000000000000000000000000000000090941693909317600160b01b6001600160401b0387160217909255600281018890556003808201889055600690910180548793919260ff19909116919084908111156125a2576125a2612aa1565b0217905550604080518781526001600160401b038416602082015282916001600160a01b038a169133917fb9120c5321ef5d2f12cd98255cac811fca6e4fbc0ee94caf950c34292603f6af910160405180910390a49695505050505050565b6060600061260d61138b565b9050806001600160401b038111156126275761262761295c565b60405190808252806020026020018201604052801561266057816020015b61264d6128b7565b8152602001906001900390816126455790505b50915061266b6128b7565b60005b828110156127985760046000612685836001612e10565b81526020808201929092526040908101600020815161016081018352815460ff80821615158352610100918290046001600160a01b0390811696840196909652600184015495861694830194909452600160a01b850484166060830152600160a81b850484166080830152600160b01b9094046001600160401b031660a0820152600282015460c082015260038083015460e0830152600483015494820194909452600582015461012082015260068201549093919261014085019291169081111561275357612753612aa1565b600381111561276457612764612aa1565b905250805190925015612790578184828151811061278457612784612e69565b60200260200101819052505b60010161266e565b50505090565b804710156127ee5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016106de565b6000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461283b576040519150601f19603f3d011682016040523d82523d6000602084013e612840565b606091505b50509050806107e15760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016106de565b6040805161016081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810182905261012081018290529061014082015290565b60006020828403121561292357600080fd5b5035919050565b80356001600160a01b0381168114610e6357600080fd5b60006020828403121561295357600080fd5b6113848261292a565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561298857600080fd5b6129918561292a565b935061299f6020860161292a565b92506040850135915060608501356001600160401b03808211156129c257600080fd5b818701915087601f8301126129d657600080fd5b8135818111156129e8576129e861295c565b604051601f8201601f19908116603f01168101908382118183101715612a1057612a1061295c565b816040528281528a6020848701011115612a2957600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215612a6057600080fd5b50508035926020909101359150565b80356001600160401b0381168114610e6357600080fd5b600060208284031215612a9857600080fd5b61138482612a6f565b634e487b7160e01b600052602160045260246000fd5b60048110612ad557634e487b7160e01b600052602160045260246000fd5b9052565b80511515825260018060a01b0360208201511660208301526001600160401b036040820151166040830152606081015160608301526080810151608083015260a081015160a083015260c08101516107e160c0840182612ab7565b60e081016110048284612ad9565b6020808252825182820181905260009190848201906040850190845b81811015612b8457612b71838551612ad9565b9284019260e09290920191600101612b5e565b50909695505050505050565b60008060408385031215612ba357600080fd5b82359150612bb360208401612a6f565b90509250929050565b8051151582526020810151612bdc60208401826001600160a01b03169052565b506040810151612bf760408401826001600160a01b03169052565b506060810151612c0c606084018260ff169052565b506080810151612c21608084018260ff169052565b5060a0810151612c3c60a08401826001600160401b03169052565b5060c081015160c083015260e081015160e083015261010080820151818401525061012080820151818401525061014080820151611e1d82850182612ab7565b6020808252825182820181905260009190848201906040850190845b81811015612b8457612cab838551612bbc565b928401926101609290920191600101612c98565b600080600060608486031215612cd457600080fd5b505081359360208301359350604090920135919050565b61016081016110048284612bbc565b803560048110610e6357600080fd5b600080600060608486031215612d1e57600080fd5b8335925060208401359150612d3560408501612cfa565b90509250925092565b60008060008060808587031215612d5457600080fd5b612d5d8561292a565b93506020850135925060408501359150612d7960608601612cfa565b905092959194509250565b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03808316818516808303821115612dbc57612dbc612d84565b01949350505050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b600060ff821660ff84168060ff03821115612e0857612e08612d84565b019392505050565b60008219821115612e2357612e23612d84565b500190565b6000816000190483118215151615612e4257612e42612d84565b500290565b600082612e6457634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b60006001600160401b0383811690831681811015612e9f57612e9f612d84565b039392505050565b60006001600160401b0380831681851681830481118215151615612ecd57612ecd612d84565b02949350505050565b600060ff821660ff841680821015612ef057612ef0612d84565b90039392505050565b600060ff821660ff8103612f0f57612f0f612d84565b6001019291505056fea164736f6c634300080f000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1718,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1788,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "_entryIdTracker",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)1377_storage"
      },
      {
        "astId": 1791,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "_bidIdTracker",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1377_storage"
      },
      {
        "astId": 1797,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "biddingPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 1800,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "gracePeriod",
        "offset": 8,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 1850,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "_sellerInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(SellerInfo)1829_storage)"
      },
      {
        "astId": 1855,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "_buyerInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(BuyerInfo)1845_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(InstallmentPlan)1805": {
        "encoding": "inplace",
        "label": "enum ProjectY.InstallmentPlan",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(BuyerInfo)1845_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProjectY.BuyerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BuyerInfo)1845_storage"
      },
      "t_mapping(t_uint256,t_struct(SellerInfo)1829_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProjectY.SellerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SellerInfo)1829_storage"
      },
      "t_struct(BuyerInfo)1845_storage": {
        "encoding": "inplace",
        "label": "struct ProjectY.BuyerInfo",
        "members": [
          {
            "astId": 1831,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "isSelected",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1833,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "buyerAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1835,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "timestamp",
            "offset": 21,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1837,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "bidPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1839,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "entryId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1841,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "pricePaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1844,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "bidInstallment",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(InstallmentPlan)1805"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Counter)1377_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1376,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SellerInfo)1829_storage": {
        "encoding": "inplace",
        "label": "struct ProjectY.SellerInfo",
        "members": [
          {
            "astId": 1807,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "onSale",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1809,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "sellerAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1811,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "contractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1813,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "installmentsPaid",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 1815,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "paymentsClaimed",
            "offset": 21,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 1817,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "timestamp",
            "offset": 22,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1819,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1821,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "sellingPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1823,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "totalBids",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1825,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "selectedBidId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1828,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "installment",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(InstallmentPlan)1805"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}