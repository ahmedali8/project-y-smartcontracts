{
  "address": "0xEA592eF153647196282D5d98F0b728b00260A114",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entryId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "Bid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "bidId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entryId",
          "type": "uint256"
        }
      ],
      "name": "BidSelected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "entryId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "Sell",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ONE_MONTH",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidPrice_",
          "type": "uint256"
        },
        {
          "internalType": "enum ProjectY.InstallmentPlan",
          "name": "installment_",
          "type": "uint8"
        }
      ],
      "name": "bid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "biddingPeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_entryId",
          "type": "uint256"
        }
      ],
      "name": "getAllBidsOnNFT",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isSelected",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "bidPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entryId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePaid",
              "type": "uint256"
            },
            {
              "internalType": "enum ProjectY.InstallmentPlan",
              "name": "bidInstallment",
              "type": "uint8"
            }
          ],
          "internalType": "struct ProjectY.BuyerInfo[]",
          "name": "allBidsOnNFT_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "name": "getBuyerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isSelected",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "bidPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "entryId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "pricePaid",
              "type": "uint256"
            },
            {
              "internalType": "enum ProjectY.InstallmentPlan",
              "name": "bidInstallment",
              "type": "uint8"
            }
          ],
          "internalType": "struct ProjectY.BuyerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "name": "getDownPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "installmentNumber_",
          "type": "uint64"
        }
      ],
      "name": "getInstallmentMonthTimestamp",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "name": "getInstallmentPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        }
      ],
      "name": "getInstallmentPerMonth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "installmentNumber_",
          "type": "uint256"
        }
      ],
      "name": "getInstallmentPercentageOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNFTsOpenForSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "onSale",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "sellerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "installmentsPaid",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellingPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBids",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "selectedBidId",
              "type": "uint256"
            },
            {
              "internalType": "enum ProjectY.InstallmentPlan",
              "name": "installment",
              "type": "uint8"
            }
          ],
          "internalType": "struct ProjectY.SellerInfo[]",
          "name": "nftsOpenForSale_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        }
      ],
      "name": "getSellerInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "onSale",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "sellerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "installmentsPaid",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellingPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBids",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "selectedBidId",
              "type": "uint256"
            },
            {
              "internalType": "enum ProjectY.InstallmentPlan",
              "name": "installment",
              "type": "uint8"
            }
          ],
          "internalType": "struct ProjectY.SellerInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalBidIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalEntryIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "getUserNFTsOpenForSale",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "onSale",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "sellerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "contractAddress",
              "type": "address"
            },
            {
              "internalType": "uint8",
              "name": "installmentsPaid",
              "type": "uint8"
            },
            {
              "internalType": "uint64",
              "name": "timestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sellingPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalBids",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "selectedBidId",
              "type": "uint256"
            },
            {
              "internalType": "enum ProjectY.InstallmentPlan",
              "name": "installment",
              "type": "uint8"
            }
          ],
          "internalType": "struct ProjectY.SellerInfo[]",
          "name": "userNFTsOpenForSale_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gracePeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "name": "isBidIdValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        }
      ],
      "name": "isEntryIdValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryId_",
          "type": "uint256"
        }
      ],
      "name": "payInstallment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "name": "selectBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sellingPrice_",
          "type": "uint256"
        },
        {
          "internalType": "enum ProjectY.InstallmentPlan",
          "name": "installment_",
          "type": "uint8"
        }
      ],
      "name": "sell",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "biddingPeriod_",
          "type": "uint64"
        }
      ],
      "name": "setBiddingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "gracePeriod_",
          "type": "uint64"
        }
      ],
      "name": "setGracePeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bidId_",
          "type": "uint256"
        }
      ],
      "name": "withdrawBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x95f343f8b56e0da426858e7d6e0aec460ef58306949169f05a8ccee14a06c9c5",
  "receipt": {
    "to": null,
    "from": "0xde43f899587aaa2Ea6aD243F3d68a5027F2C6a94",
    "contractAddress": "0xEA592eF153647196282D5d98F0b728b00260A114",
    "transactionIndex": 15,
    "gasUsed": "2557701",
    "logsBloom": "0x
    "blockHash": "0xc55cd1f26fdcc228facfb0474f57478828751d2ee710b34f047d02e1dc41e884",
    "transactionHash": "0x95f343f8b56e0da426858e7d6e0aec460ef58306949169f05a8ccee14a06c9c5",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 11086079,
        "transactionHash": "0x95f343f8b56e0da426858e7d6e0aec460ef58306949169f05a8ccee14a06c9c5",
        "address": "0xEA592eF153647196282D5d98F0b728b00260A114",
        "topics": [
          "0x8292fce18fa69edf4db7b94ea2e58241df0ae57f97e0a6c9b29067028bf92d76",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000de43f899587aaa2ea6ad243f3d68a5027f2c6a94"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0xc55cd1f26fdcc228facfb0474f57478828751d2ee710b34f047d02e1dc41e884"
      }
    ],
    "blockNumber": 11086079,
    "cumulativeGasUsed": "8147865",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xde43f899587aaa2Ea6aD243F3d68a5027F2C6a94"
  ],
  "numDeployments": 5,
  "solcInputHash": "97f1d5f4b492cb4c837b9fe010fd867a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"}],\"name\":\"BidSelected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"Sell\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ONE_MONTH\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice_\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"installment_\",\"type\":\"uint8\"}],\"name\":\"bid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"biddingPeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_entryId\",\"type\":\"uint256\"}],\"name\":\"getAllBidsOnNFT\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSelected\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"bidInstallment\",\"type\":\"uint8\"}],\"internalType\":\"struct ProjectY.BuyerInfo[]\",\"name\":\"allBidsOnNFT_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"name\":\"getBuyerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isSelected\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePaid\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"bidInstallment\",\"type\":\"uint8\"}],\"internalType\":\"struct ProjectY.BuyerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"name\":\"getDownPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"installmentNumber_\",\"type\":\"uint64\"}],\"name\":\"getInstallmentMonthTimestamp\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"name\":\"getInstallmentPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"}],\"name\":\"getInstallmentPerMonth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"installmentNumber_\",\"type\":\"uint256\"}],\"name\":\"getInstallmentPercentageOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTsOpenForSale\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"onSale\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"installmentsPaid\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selectedBidId\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"installment\",\"type\":\"uint8\"}],\"internalType\":\"struct ProjectY.SellerInfo[]\",\"name\":\"nftsOpenForSale_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"}],\"name\":\"getSellerInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"onSale\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"installmentsPaid\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selectedBidId\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"installment\",\"type\":\"uint8\"}],\"internalType\":\"struct ProjectY.SellerInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalBidIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalEntryIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getUserNFTsOpenForSale\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"onSale\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sellerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"installmentsPaid\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBids\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"selectedBidId\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"installment\",\"type\":\"uint8\"}],\"internalType\":\"struct ProjectY.SellerInfo[]\",\"name\":\"userNFTsOpenForSale_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gracePeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"name\":\"isBidIdValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"}],\"name\":\"isEntryIdValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryId_\",\"type\":\"uint256\"}],\"name\":\"payInstallment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"name\":\"selectBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellingPrice_\",\"type\":\"uint256\"},{\"internalType\":\"enum ProjectY.InstallmentPlan\",\"name\":\"installment_\",\"type\":\"uint8\"}],\"name\":\"sell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"biddingPeriod_\",\"type\":\"uint64\"}],\"name\":\"setBiddingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"gracePeriod_\",\"type\":\"uint64\"}],\"name\":\"setGracePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidId_\",\"type\":\"uint256\"}],\"name\":\"withdrawBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProjectY.sol\":\"ProjectY\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x0108bf6a6ebd5f96678bed33a35947537263f96766131ee91461fb6485805028\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnerUpdated(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnerUpdated(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setOwner(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnerUpdated(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7e91c80b0dd1a14a19cb9e661b99924043adab6d9d893bbfcf3a6a3dc23a6743\",\"license\":\"AGPL-3.0-only\"},\"contracts/ProjectY.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@rari-capital/solmate/src/auth/Owned.sol\\\";\\n\\ncontract ProjectY is Context, Owned, ERC721Holder {\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _entryIdTracker;\\n    Counters.Counter private _bidIdTracker;\\n\\n    uint64 public constant ONE_MONTH = 30 days;\\n\\n    uint64 public biddingPeriod = 7 days;\\n    uint64 public gracePeriod = 7 days;\\n\\n    enum InstallmentPlan {\\n        None, // no installment\\n        ThreeMonths,\\n        SixMonths,\\n        NineMonths\\n    }\\n\\n    struct SellerInfo {\\n        bool onSale;\\n        address sellerAddress;\\n        address contractAddress;\\n        uint8 installmentsPaid;\\n        uint64 timestamp;\\n        uint256 tokenId;\\n        uint256 sellingPrice;\\n        uint256 totalBids;\\n        uint256 selectedBidId;\\n        InstallmentPlan installment;\\n    }\\n\\n    struct BuyerInfo {\\n        bool isSelected;\\n        address buyerAddress;\\n        uint64 timestamp;\\n        uint256 bidPrice;\\n        uint256 entryId;\\n        uint256 pricePaid; // initially equal to downpayment\\n        InstallmentPlan bidInstallment;\\n    }\\n\\n    // entryId -> SellerInfo\\n    mapping(uint256 => SellerInfo) internal _sellerInfo;\\n\\n    // bidId -> BuyerInfo\\n    mapping(uint256 => BuyerInfo) internal _buyerInfo;\\n\\n    event Sell(\\n        address indexed seller,\\n        address indexed contractAddress,\\n        uint256 tokenId,\\n        uint256 indexed entryId,\\n        uint64 timestamp\\n    );\\n\\n    event Bid(\\n        address indexed buyer,\\n        uint256 indexed entryId,\\n        uint256 indexed bidId,\\n        uint64 timestamp\\n    );\\n\\n    event BidSelected(uint256 indexed bidId, uint256 indexed entryId);\\n\\n    constructor(address owner_) Owned(owner_) {\\n        // solhint-disable-previous-line no-empty-blocks\\n    }\\n\\n    // some additional getters for front-end start\\n\\n    function getNFTsOpenForSale() public view returns (SellerInfo[] memory nftsOpenForSale_) {\\n        uint256 totalEntryIds_ = getTotalEntryIds();\\n        SellerInfo memory sellerInfo_;\\n\\n        for (uint256 i_ = 0; i_ < totalEntryIds_; ) {\\n            sellerInfo_ = _sellerInfo[i_];\\n\\n            if (sellerInfo_.onSale) {\\n                nftsOpenForSale_[i_] = sellerInfo_;\\n            }\\n\\n            unchecked {\\n                ++i_;\\n            }\\n        }\\n    }\\n\\n    function getAllBidsOnNFT(uint256 _entryId)\\n        public\\n        view\\n        returns (BuyerInfo[] memory allBidsOnNFT_)\\n    {\\n        uint256 totalBidIds_ = getTotalBidIds();\\n\\n        for (uint256 i_ = 0; i_ < totalBidIds_; ) {\\n            if (_buyerInfo[i_].entryId == _entryId) {\\n                allBidsOnNFT_[i_] = _buyerInfo[i_];\\n            }\\n\\n            unchecked {\\n                ++i_;\\n            }\\n        }\\n    }\\n\\n    function getUserNFTsOpenForSale(address user_)\\n        public\\n        view\\n        returns (SellerInfo[] memory userNFTsOpenForSale_)\\n    {\\n        uint256 totalEntryIds_ = getTotalEntryIds();\\n        SellerInfo memory sellerInfo_;\\n\\n        for (uint256 i_ = 0; i_ < totalEntryIds_; ) {\\n            sellerInfo_ = _sellerInfo[i_];\\n\\n            if (sellerInfo_.onSale && sellerInfo_.sellerAddress == user_) {\\n                userNFTsOpenForSale_[i_] = sellerInfo_;\\n            }\\n\\n            unchecked {\\n                ++i_;\\n            }\\n        }\\n    }\\n\\n    // some additional getters for front-end end\\n\\n    function isEntryIdValid(uint256 entryId_) public view returns (bool isValid_) {\\n        require(isValid_ = (_sellerInfo[entryId_].sellerAddress != address(0)), \\\"INVALID_ENTRY_ID\\\");\\n    }\\n\\n    function isBidIdValid(uint256 bidId_) public view returns (bool isValid_) {\\n        require(isValid_ = (_buyerInfo[bidId_].buyerAddress != address(0)), \\\"INVALID_BID_ID\\\");\\n    }\\n\\n    function getSellerInfo(uint256 entryId_) public view returns (SellerInfo memory) {\\n        isEntryIdValid(entryId_);\\n        return _sellerInfo[entryId_];\\n    }\\n\\n    function getBuyerInfo(uint256 bidId_) public view returns (BuyerInfo memory) {\\n        isBidIdValid(bidId_);\\n        return _buyerInfo[bidId_];\\n    }\\n\\n    function getTotalEntryIds() public view returns (uint256) {\\n        return _entryIdTracker.current();\\n    }\\n\\n    function getTotalBidIds() public view returns (uint256) {\\n        return _bidIdTracker.current();\\n    }\\n\\n    function getDownPayment(uint256 entryId_, uint256 bidId_) public view returns (uint256) {\\n        isEntryIdValid(entryId_);\\n        isBidIdValid(bidId_);\\n\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        require(buyerInfo_.pricePaid == 0, \\\"DOWN_PAYMENT_DONE\\\");\\n\\n        InstallmentPlan installment_ = buyerInfo_.bidInstallment;\\n        uint256 bidPrice_ = buyerInfo_.bidPrice;\\n\\n        if (installment_ == InstallmentPlan.ThreeMonths) {\\n            return (bidPrice_ * 34) / 100; // 34%\\n        } else if (installment_ == InstallmentPlan.SixMonths) {\\n            return (bidPrice_ * 175) / 1000; // 17.5%\\n        } else if (installment_ == InstallmentPlan.NineMonths) {\\n            return (bidPrice_ * 12) / 100; // 12%\\n        } else {\\n            return bidPrice_; // InstallmentPlan.None\\n        }\\n    }\\n\\n    function getInstallmentPerMonth(uint256 entryId_) public view returns (uint256) {\\n        isEntryIdValid(entryId_);\\n        SellerInfo memory sellerInfo_ = _sellerInfo[entryId_];\\n\\n        uint256 bidId_ = sellerInfo_.selectedBidId;\\n        isBidIdValid(bidId_);\\n\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        InstallmentPlan installment_ = buyerInfo_.bidInstallment;\\n\\n        if (buyerInfo_.bidPrice == buyerInfo_.pricePaid) {\\n            return 0;\\n        }\\n\\n        if (installment_ == InstallmentPlan.ThreeMonths) {\\n            return (buyerInfo_.bidPrice * 33) / 100; // 33%\\n        } else if (installment_ == InstallmentPlan.SixMonths) {\\n            return (buyerInfo_.bidPrice * 165) / 1000; // 16.5%\\n        } else if (installment_ == InstallmentPlan.NineMonths) {\\n            return (buyerInfo_.bidPrice * 11) / 100; // 11%\\n        } else {\\n            return 0; // InstallmentPlan.None\\n        }\\n    }\\n\\n    function getInstallmentPercentageOf(\\n        uint256 entryId_,\\n        uint256 bidId_,\\n        uint256 installmentNumber_\\n    ) public view returns (uint256) {\\n        return\\n            getDownPayment(entryId_, bidId_) +\\n            (installmentNumber_ * getInstallmentPerMonth(entryId_));\\n    }\\n\\n    function getInstallmentPaid(uint256 entryId_, uint256 bidId_) public view returns (uint256) {\\n        isEntryIdValid(entryId_);\\n        isBidIdValid(bidId_);\\n\\n        SellerInfo memory sellerInfo_ = _sellerInfo[entryId_];\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        return\\n            getInstallmentPercentageOf(entryId_, bidId_, sellerInfo_.installmentsPaid) *\\n            buyerInfo_.bidPrice;\\n    }\\n\\n    function getInstallmentMonthTimestamp(uint256 bidId_, uint64 installmentNumber_)\\n        public\\n        view\\n        returns (uint64)\\n    {\\n        return _buyerInfo[bidId_].timestamp + ((installmentNumber_ - 1) * ONE_MONTH);\\n    }\\n\\n    function sell(\\n        address contractAddress_,\\n        uint256 tokenId_,\\n        uint256 sellingPrice_,\\n        InstallmentPlan installment_\\n    ) public returns (uint256) {\\n        require(sellingPrice_ != 0, \\\"INVALID_PRICE\\\");\\n\\n        uint64 blockTimestamp_ = uint64(block.timestamp);\\n\\n        // create unique entryId\\n        _entryIdTracker.increment();\\n        uint256 entryId_ = _entryIdTracker.current();\\n\\n        // transfer NFT to this contract\\n        IERC721(contractAddress_).safeTransferFrom(_msgSender(), address(this), tokenId_);\\n\\n        // update mapping\\n        _sellerInfo[entryId_].onSale = true;\\n        _sellerInfo[entryId_].sellerAddress = _msgSender();\\n        _sellerInfo[entryId_].contractAddress = contractAddress_;\\n        _sellerInfo[entryId_].timestamp = blockTimestamp_;\\n        _sellerInfo[entryId_].tokenId = tokenId_;\\n        _sellerInfo[entryId_].sellingPrice = sellingPrice_;\\n        _sellerInfo[entryId_].installment = installment_;\\n\\n        emit Sell(_msgSender(), contractAddress_, tokenId_, entryId_, blockTimestamp_);\\n        return entryId_;\\n    }\\n\\n    function bid(\\n        uint256 entryId_,\\n        uint256 bidPrice_,\\n        InstallmentPlan installment_\\n    ) public payable returns (uint256) {\\n        uint256 value_ = msg.value;\\n        uint64 blockTimestamp_ = uint64(block.timestamp);\\n\\n        // create unique bidId\\n        _bidIdTracker.increment();\\n        uint256 bidId_ = _bidIdTracker.current();\\n\\n        _buyerInfo[bidId_].buyerAddress = _msgSender();\\n\\n        uint256 downPayment_ = getDownPayment(entryId_, bidId_);\\n\\n        require(value_ != 0 && value_ == downPayment_, \\\"VALUE_NOT_EQUAL_TO_DOWN_PAYMENT\\\");\\n\\n        require(\\n            blockTimestamp_ <= _sellerInfo[entryId_].timestamp + biddingPeriod,\\n            \\\"BIDDING_PERIOD_OVER\\\"\\n        );\\n\\n        // update buyer info mapping\\n        _buyerInfo[bidId_].buyerAddress = _msgSender();\\n        _buyerInfo[bidId_].timestamp = blockTimestamp_;\\n        _buyerInfo[bidId_].bidPrice = bidPrice_;\\n        _buyerInfo[bidId_].entryId = entryId_;\\n        _buyerInfo[bidId_].pricePaid = value_;\\n        _buyerInfo[bidId_].bidInstallment = installment_;\\n\\n        _sellerInfo[entryId_].totalBids += 1;\\n\\n        emit Bid(_msgSender(), entryId_, bidId_, blockTimestamp_);\\n        return bidId_;\\n    }\\n\\n    function selectBid(uint256 bidId_) public {\\n        uint64 blockTimestamp_ = uint64(block.timestamp);\\n        isBidIdValid(bidId_);\\n\\n        uint256 entryId_ = _buyerInfo[bidId_].entryId;\\n        isEntryIdValid(entryId_);\\n\\n        SellerInfo memory sellerInfo_ = _sellerInfo[entryId_];\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        require(_msgSender() == sellerInfo_.sellerAddress, \\\"CALLER_NOT_SELLER\\\");\\n        require(\\n            blockTimestamp_ >= sellerInfo_.timestamp + biddingPeriod,\\n            \\\"BIDDING_PERIOD_NOT_OVER\\\"\\n        );\\n        require(sellerInfo_.selectedBidId == 0, \\\"CANNOT_RESELECT_BID\\\");\\n\\n        // if installment plan is none so transfer the nft on selection of bid\\n        if (buyerInfo_.bidInstallment == InstallmentPlan.None) {\\n            IERC721(sellerInfo_.contractAddress).safeTransferFrom(\\n                address(this),\\n                buyerInfo_.buyerAddress,\\n                sellerInfo_.tokenId\\n            );\\n\\n            // delete seller\\n            delete _sellerInfo[entryId_];\\n            // delete bid\\n            delete _buyerInfo[bidId_];\\n        } else {\\n            // update buyer info\\n            _buyerInfo[bidId_].isSelected = true;\\n            _buyerInfo[bidId_].timestamp = blockTimestamp_;\\n\\n            // make NFT onSale off and set selected bidId\\n            _sellerInfo[entryId_].onSale = false;\\n            _sellerInfo[entryId_].selectedBidId = bidId_;\\n\\n            _sellerInfo[entryId_].installment = buyerInfo_.bidInstallment;\\n            _sellerInfo[entryId_].sellingPrice = buyerInfo_.bidPrice;\\n            _sellerInfo[entryId_].installmentsPaid = 1;\\n        }\\n\\n        emit BidSelected(bidId_, entryId_);\\n    }\\n\\n    function payInstallment(uint256 entryId_) public payable {\\n        uint256 value_ = msg.value;\\n\\n        isEntryIdValid(entryId_);\\n\\n        uint256 bidId_ = _sellerInfo[entryId_].selectedBidId;\\n        isBidIdValid(bidId_);\\n\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        require(buyerInfo_.buyerAddress == _msgSender(), \\\"CALLER_NOT_BUYER\\\");\\n\\n        uint256 bidPrice_ = buyerInfo_.bidPrice;\\n        uint256 pricePaid_ = buyerInfo_.pricePaid;\\n\\n        if (bidPrice_ != pricePaid_) {\\n            uint256 installmentPayment_ = getInstallmentPerMonth(entryId_);\\n\\n            require(\\n                installmentPayment_ == value_ && value_ != 0 && installmentPayment_ != 0,\\n                \\\"INVALID_INSTALLMENT_VALUE\\\"\\n            );\\n\\n            _buyerInfo[bidId_].pricePaid += value_;\\n            _sellerInfo[entryId_].installmentsPaid++;\\n        }\\n\\n        // all installments done so transfer NFT to buyer\\n        if (bidPrice_ == pricePaid_) {\\n            IERC721(_sellerInfo[entryId_].contractAddress).safeTransferFrom(\\n                address(this),\\n                _msgSender(),\\n                _sellerInfo[entryId_].tokenId\\n            );\\n\\n            // delete seller\\n            delete _sellerInfo[entryId_];\\n            // delete bid\\n            delete _buyerInfo[bidId_];\\n        }\\n    }\\n\\n    function withdrawBid(uint256 bidId_) public {\\n        isBidIdValid(bidId_);\\n\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        uint256 entryId_ = buyerInfo_.entryId;\\n\\n        require(\\n            uint64(block.timestamp) >= _sellerInfo[entryId_].timestamp + biddingPeriod,\\n            \\\"BIDDING_PERIOD_NOT_OVER\\\"\\n        );\\n        require(!buyerInfo_.isSelected, \\\"BIDDER_SHOULD_NOT_BE_SELECTED\\\");\\n        require(_msgSender() == buyerInfo_.buyerAddress, \\\"CALLER_NOT_BUYER\\\");\\n\\n        // delete bid\\n        delete _buyerInfo[bidId_];\\n\\n        // return the price paid\\n        Address.sendValue(payable(buyerInfo_.buyerAddress), buyerInfo_.pricePaid);\\n    }\\n\\n    function liquidate(uint256 entryId_) public payable {\\n        uint256 value_ = msg.value;\\n\\n        isEntryIdValid(entryId_);\\n        SellerInfo memory sellerInfo_ = _sellerInfo[entryId_];\\n\\n        uint256 bidId_ = sellerInfo_.selectedBidId;\\n        isBidIdValid(bidId_);\\n        BuyerInfo memory buyerInfo_ = _buyerInfo[bidId_];\\n\\n        uint256 installmentPerMonth_ = getInstallmentPerMonth(entryId_);\\n\\n        // None or Installments paid\\n        require(\\n            installmentPerMonth_ != 0 || (buyerInfo_.bidPrice == buyerInfo_.pricePaid),\\n            \\\"NO_INSTALLMENT_LEFT\\\"\\n        );\\n\\n        // get timestamp of next payment\\n        uint256 installmentMonthTimestamp_ = getInstallmentMonthTimestamp(\\n            bidId_,\\n            sellerInfo_.installmentsPaid + 1\\n        );\\n\\n        // if timestamp of next payment + gracePeriod is passed then liquidate otherwise stop execution\\n        require(\\n            uint64(block.timestamp) > (installmentMonthTimestamp_ + gracePeriod),\\n            \\\"INSTALLMENT_ON_TRACK\\\"\\n        );\\n\\n        address oldbuyer_ = buyerInfo_.buyerAddress;\\n        uint256 priceToBePaidByLiquidator_ = (buyerInfo_.pricePaid * 95) / 100;\\n\\n        require(priceToBePaidByLiquidator_ == value_, \\\"INVALID_LIQUIDATION_VALUE\\\");\\n\\n        // update new buyer\\n        _buyerInfo[bidId_].buyerAddress = _msgSender();\\n\\n        // transfer 95% of pricePaid to old buyer\\n        Address.sendValue(payable(oldbuyer_), priceToBePaidByLiquidator_);\\n    }\\n\\n    function setBiddingPeriod(uint64 biddingPeriod_) public onlyOwner {\\n        require(biddingPeriod_ != 0, \\\"INVALID_BIDDING_PERIOD\\\");\\n        biddingPeriod = biddingPeriod_;\\n    }\\n\\n    function setGracePeriod(uint64 gracePeriod_) public onlyOwner {\\n        require(gracePeriod_ != 0, \\\"INVALID_GRACE_PERIOD\\\");\\n        gracePeriod = gracePeriod_;\\n    }\\n}\\n\",\"keccak256\":\"0xd86c5d24956c314d3b4b2b9a9d90a95f9e1470691835360a6ddce518e49e87f2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1718,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1788,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "_entryIdTracker",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Counter)1377_storage"
      },
      {
        "astId": 1791,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "_bidIdTracker",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1377_storage"
      },
      {
        "astId": 1797,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "biddingPeriod",
        "offset": 0,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 1800,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "gracePeriod",
        "offset": 8,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 1848,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "_sellerInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(SellerInfo)1827_storage)"
      },
      {
        "astId": 1853,
        "contract": "contracts/ProjectY.sol:ProjectY",
        "label": "_buyerInfo",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(BuyerInfo)1843_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(InstallmentPlan)1805": {
        "encoding": "inplace",
        "label": "enum ProjectY.InstallmentPlan",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(BuyerInfo)1843_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProjectY.BuyerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(BuyerInfo)1843_storage"
      },
      "t_mapping(t_uint256,t_struct(SellerInfo)1827_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProjectY.SellerInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(SellerInfo)1827_storage"
      },
      "t_struct(BuyerInfo)1843_storage": {
        "encoding": "inplace",
        "label": "struct ProjectY.BuyerInfo",
        "members": [
          {
            "astId": 1829,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "isSelected",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1831,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "buyerAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1833,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "timestamp",
            "offset": 21,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1835,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "bidPrice",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1837,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "entryId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1839,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "pricePaid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1842,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "bidInstallment",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(InstallmentPlan)1805"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Counter)1377_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1376,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(SellerInfo)1827_storage": {
        "encoding": "inplace",
        "label": "struct ProjectY.SellerInfo",
        "members": [
          {
            "astId": 1807,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "onSale",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1809,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "sellerAddress",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1811,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "contractAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1813,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "installmentsPaid",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 1815,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "timestamp",
            "offset": 21,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1817,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "tokenId",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1819,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "sellingPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1821,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "totalBids",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1823,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "selectedBidId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1826,
            "contract": "contracts/ProjectY.sol:ProjectY",
            "label": "installment",
            "offset": 0,
            "slot": "6",
            "type": "t_enum(InstallmentPlan)1805"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}