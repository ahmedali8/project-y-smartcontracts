{
  "language": "Solidity",
  "sources": {
    "contracts/ProjectY.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.16;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@rari-capital/solmate/src/auth/Owned.sol\";\n\n\n\ncontract ProjectY is Context, Owned, ERC721Holder {\n    using Counters for Counters.Counter;\n\n    /*//////////////////////////////////////////////////////////////\n                                VARIABLES\n    //////////////////////////////////////////////////////////////*/\n\n    Counters.Counter private p_entryIdTracker;\n    Counters.Counter private p_bidIdTracker;\n\n    // // FOR TESTNET ONLY\n    uint64 public constant ONE_MONTH = 1 days;\n    uint64 public biddingPeriod = 90 minutes;\n    uint64 public gracePeriod = 90 minutes;\n\n    // uint64 public constant ONE_MONTH = 30 days;\n    // uint64 public biddingPeriod = 7 days;\n    // uint64 public gracePeriod = 7 days;\n\n    // vars for frontend helpers\n    uint256 public getHistoricTotalEntryIds;\n    uint256 public getHistoricTotalBidIds;\n\n    enum InstallmentPlan {\n        None, // no installment\n        ThreeMonths,\n        SixMonths,\n        NineMonths\n    }\n\n    struct SellerInfo {\n        bool onSale;\n        address sellerAddress;\n        address contractAddress;\n        uint8 installmentsPaid;\n        uint8 paymentsClaimed;\n        uint64 timestamp;\n        uint256 tokenId;\n        uint256 sellingPrice;\n        uint256 totalBids;\n        uint256 selectedBidId;\n        InstallmentPlan installment;\n    }\n\n    struct BuyerInfo {\n        bool isSelected;\n        address buyerAddress;\n        uint64 timestamp;\n        uint256 bidPrice;\n        uint256 entryId;\n        uint256 pricePaid; // initially equal to downpayment\n        InstallmentPlan bidInstallment;\n    }\n\n    // entryId -> SellerInfo\n    mapping(uint256 => SellerInfo) private p_sellerInfo;\n\n    // bidId -> BuyerInfo\n    mapping(uint256 => BuyerInfo) private p_buyerInfo;\n\n    /*//////////////////////////////////////////////////////////////\n                                EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event Sell(\n        address indexed seller,\n        address indexed contractAddress,\n        uint256 tokenId,\n        uint256 indexed entryId,\n        uint64 timestamp\n    );\n\n    event Bid(\n        address indexed buyer,\n        uint256 indexed entryId,\n        uint256 indexed bidId,\n        uint64 timestamp\n    );\n\n    event BidSelected(uint256 bidId, uint256 entryId);\n\n    event InstallmentPaid(address buyer, uint256 entryId, uint256 bidId, uint256 installmentNumber);\n\n    event BidWithdrawn(uint256 bidId, uint256 entryId, uint256 value);\n\n    event SellWithdrawn(address seller, uint256 entryId);\n\n    event PaymentWithdrawn(uint256 bidId, uint256 entryId, uint256 value, uint256 paymentsClaimed);\n\n    event Liquidated(uint256 entryId, uint256 bidId, uint256 installmentPaid, uint256 value);\n\n    event BiddingPeriodUpdated(uint64 prevBiddingPeriod, uint64 newBiddingPeriod);\n\n    event GracePeriodUpdated(uint64 prevGracePeriod, uint64 newGracePeriod);\n\n    /*//////////////////////////////////////////////////////////////\n                                CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address owner_) Owned(owner_) {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                        NON-VIEW/PURE FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function sell(\n        address contractAddress_,\n        uint256 tokenId_,\n        uint256 sellingPrice_,\n        InstallmentPlan installment_\n    ) external returns (uint256) {\n        require(sellingPrice_ != 0, \"INVALID_PRICE\");\n\n        uint64 blockTimestamp_ = uint64(block.timestamp);\n\n        // create unique entryId\n        p_entryIdTracker.increment();\n        getHistoricTotalEntryIds++;\n        uint256 entryId_ = p_entryIdTracker.current();\n\n        // update mapping\n        p_sellerInfo[entryId_].onSale = true;\n        p_sellerInfo[entryId_].sellerAddress = _msgSender();\n        p_sellerInfo[entryId_].contractAddress = contractAddress_;\n        p_sellerInfo[entryId_].timestamp = blockTimestamp_;\n        p_sellerInfo[entryId_].tokenId = tokenId_;\n        p_sellerInfo[entryId_].sellingPrice = sellingPrice_;\n        p_sellerInfo[entryId_].installment = installment_;\n\n        emit Sell(_msgSender(), contractAddress_, tokenId_, entryId_, blockTimestamp_);\n\n        // transfer NFT to this contract\n        IERC721(contractAddress_).safeTransferFrom(_msgSender(), address(this), tokenId_);\n\n        return entryId_;\n    }\n\n    function withdrawSell(uint256 entryId_) external returns (uint256) {\n        _requireIsEntryIdValid(entryId_);\n\n        SellerInfo memory sellerInfo_ = p_sellerInfo[entryId_];\n\n        require(_msgSender() == sellerInfo_.sellerAddress, \"CALLER_NOT_SELLER\");\n\n        require(\n            uint64(block.timestamp) >= sellerInfo_.timestamp + biddingPeriod,\n            \"BIDDING_PERIOD_NOT_OVER\"\n        );\n        require(sellerInfo_.selectedBidId == 0, \"BIDDER_SHOULD_NOT_BE_SELECTED\");\n\n        // delete entryId\n        delete p_sellerInfo[entryId_];\n\n        // decrease total entryIds\n        p_entryIdTracker.decrement();\n\n        emit SellWithdrawn(sellerInfo_.sellerAddress, entryId_);\n\n        IERC721(sellerInfo_.contractAddress).safeTransferFrom(\n            address(this),\n            sellerInfo_.sellerAddress,\n            sellerInfo_.tokenId\n        );\n\n        return entryId_;\n    }\n\n    function bid(\n        uint256 entryId_,\n        uint256 bidPrice_,\n        InstallmentPlan installment_\n    ) external payable returns (uint256) {\n        _requireIsEntryIdValid(entryId_);\n\n        uint256 value_ = msg.value;\n        uint64 blockTimestamp_ = uint64(block.timestamp);\n\n        require(\n            blockTimestamp_ <= p_sellerInfo[entryId_].timestamp + biddingPeriod,\n            \"BIDDING_PERIOD_OVER\"\n        );\n\n        // create unique bidId\n        p_bidIdTracker.increment();\n        getHistoricTotalBidIds++;\n        uint256 bidId_ = p_bidIdTracker.current();\n\n        // update buyer info mapping\n        p_buyerInfo[bidId_].buyerAddress = _msgSender();\n        p_buyerInfo[bidId_].bidInstallment = installment_;\n        p_buyerInfo[bidId_].timestamp = blockTimestamp_;\n        p_buyerInfo[bidId_].bidPrice = bidPrice_;\n        p_buyerInfo[bidId_].entryId = entryId_;\n\n        // update total bids for this entry id\n        p_sellerInfo[entryId_].totalBids += 1;\n\n        uint256 downPayment_ = getDownPaymentAmount(bidId_);\n\n        require(value_ != 0 && value_ == downPayment_, \"VALUE_NOT_EQUAL_TO_DOWN_PAYMENT\");\n\n        // update price paid\n        p_buyerInfo[bidId_].pricePaid = value_;\n\n        emit Bid(_msgSender(), entryId_, bidId_, blockTimestamp_);\n\n        return bidId_;\n    }\n\n    function selectBid(uint256 bidId_) external {\n        uint64 blockTimestamp_ = uint64(block.timestamp);\n        _requireIsBidIdValid(bidId_);\n\n        uint256 entryId_ = p_buyerInfo[bidId_].entryId;\n        _requireIsEntryIdValid(entryId_);\n\n        SellerInfo memory sellerInfo_ = p_sellerInfo[entryId_];\n        BuyerInfo memory buyerInfo_ = p_buyerInfo[bidId_];\n\n        require(_msgSender() == sellerInfo_.sellerAddress, \"CALLER_NOT_SELLER\");\n        require(\n            blockTimestamp_ >= sellerInfo_.timestamp + biddingPeriod,\n            \"BIDDING_PERIOD_NOT_OVER\"\n        );\n\n        // will be tested in other than none scenario\n        require(sellerInfo_.selectedBidId == 0 && !buyerInfo_.isSelected, \"CANNOT_RESELECT_BID\");\n\n        emit BidSelected(bidId_, entryId_);\n\n        // if installment plan is none so transfer the nft on selection of bid\n        if (buyerInfo_.bidInstallment == InstallmentPlan.None) {\n            // delete seller\n            delete p_sellerInfo[entryId_];\n\n            // decrease total entryIds\n            p_entryIdTracker.decrement();\n\n            // delete bid\n            delete p_buyerInfo[bidId_];\n\n            // decrease total bidIds\n            p_bidIdTracker.decrement();\n\n            IERC721(sellerInfo_.contractAddress).safeTransferFrom(\n                address(this),\n                buyerInfo_.buyerAddress,\n                sellerInfo_.tokenId\n            );\n\n            // send value to seller\n            Address.sendValue(payable(sellerInfo_.sellerAddress), buyerInfo_.pricePaid);\n        } else {\n            // update buyer info\n            p_buyerInfo[bidId_].isSelected = true;\n            p_buyerInfo[bidId_].timestamp = blockTimestamp_;\n\n            // make NFT onSale off and set selected bidId\n            p_sellerInfo[entryId_].onSale = false;\n            p_sellerInfo[entryId_].selectedBidId = bidId_;\n\n            p_sellerInfo[entryId_].installment = buyerInfo_.bidInstallment;\n            p_sellerInfo[entryId_].sellingPrice = buyerInfo_.bidPrice;\n            p_sellerInfo[entryId_].installmentsPaid = 1;\n        }\n    }\n\n    function payInstallment(uint256 entryId_) external payable {\n        uint256 value_ = msg.value;\n\n        // if InstallmentPlan.None so entryId is not validated as it was deleted\n        _requireIsEntryIdValid(entryId_);\n\n        uint256 bidId_ = p_sellerInfo[entryId_].selectedBidId;\n\n        require(bidId_ != 0, \"NO_BID_ID_SELECTED\");\n\n        BuyerInfo memory buyerInfo_ = p_buyerInfo[bidId_];\n\n        require(buyerInfo_.buyerAddress == _msgSender(), \"CALLER_NOT_BUYER\");\n\n        uint256 bidPrice_ = buyerInfo_.bidPrice;\n        uint256 pricePaid_ = buyerInfo_.pricePaid;\n\n        uint8 installmentsPaid_ = p_sellerInfo[entryId_].installmentsPaid;\n\n        // check if installment is done then revert\n        uint8 totalInstallments_ = getTotalInstallments(bidId_);\n\n        require(installmentsPaid_ != totalInstallments_, \"NO_INSTALLMENT_LEFT\");\n\n\n\n\n\n        if (bidPrice_ != pricePaid_) {\n            uint256 installmentPerMonth_ = getInstallmentAmountPerMonth(entryId_);\n\n            require(installmentPerMonth_ == value_, \"INVALID_INSTALLMENT_VALUE\");\n\n            // get timestamp of installment paid\n            uint64 installmentPaidTimestamp_ = getInstallmentMonthTimestamp(\n                bidId_,\n                installmentsPaid_\n            );\n\n            // current timestamp should be greater than installmentPaidTimestamp_\n            require(\n                uint64(block.timestamp) > installmentPaidTimestamp_,\n                \"PAY_AFTER_APPROPRIATE_TIME\"\n            );\n\n            // get timestamp of next payment\n            uint64 installmentMonthTimestamp_ = getInstallmentMonthTimestamp(\n                bidId_,\n                installmentsPaid_ + 1 // the installment number that needs to be paid\n            );\n\n            // if current timestamp is greater then timestamp of next payment + gracePeriod then stop execution\n            require(\n                !(uint64(block.timestamp) > (installmentMonthTimestamp_ + gracePeriod)),\n                \"DUE_DATE_PASSED\"\n            );\n\n            p_buyerInfo[bidId_].pricePaid += value_;\n            p_sellerInfo[entryId_].installmentsPaid++;\n\n            // may increment local variable as well\n            pricePaid_ += value_;\n        }\n\n\n\n\n\n        emit InstallmentPaid(_msgSender(), entryId_, bidId_, installmentsPaid_ + 1);\n\n        // all installments done so transfer NFT to buyer\n        // refetch pricePaid from storage becuase we upadated it in above block\n        // if (bidPrice_ == p_buyerInfo[bidId_].pricePaid) {\n        if (bidPrice_ == pricePaid_) {\n            IERC721(p_sellerInfo[entryId_].contractAddress).safeTransferFrom(\n                address(this),\n                buyerInfo_.buyerAddress,\n                p_sellerInfo[entryId_].tokenId\n            );\n        }\n    }\n\n    function withdrawBid(uint256 bidId_) external {\n        _requireIsBidIdValid(bidId_);\n\n        BuyerInfo memory buyerInfo_ = p_buyerInfo[bidId_];\n\n        require(buyerInfo_.buyerAddress == _msgSender(), \"CALLER_NOT_BUYER\");\n        require(\n            uint64(block.timestamp) >= p_sellerInfo[buyerInfo_.entryId].timestamp + biddingPeriod,\n            \"BIDDING_PERIOD_NOT_OVER\"\n        );\n        require(!buyerInfo_.isSelected, \"BIDDER_SHOULD_NOT_BE_SELECTED\");\n\n        // delete bid\n        delete p_buyerInfo[bidId_];\n\n        // decrease total bidIds\n        p_bidIdTracker.decrement();\n\n        emit BidWithdrawn(bidId_, buyerInfo_.entryId, buyerInfo_.pricePaid);\n\n        // return the price paid\n        Address.sendValue(payable(buyerInfo_.buyerAddress), buyerInfo_.pricePaid);\n    }\n\n    function withdrawPayment(uint256 entryId_) external {\n        _requireIsEntryIdValid(entryId_);\n        SellerInfo memory sellerInfo_ = p_sellerInfo[entryId_];\n        _requireIsBidIdValid(sellerInfo_.selectedBidId);\n\n        require(_msgSender() == sellerInfo_.sellerAddress, \"CALLER_NOT_SELLER\");\n\n        uint8 secondLastInstallmentPaid_ = sellerInfo_.installmentsPaid - 1;\n\n\n\n\n\n        // check if installment is done then revert\n        uint8 totalInstallments_ = getTotalInstallments(sellerInfo_.selectedBidId);\n\n        // // get timestamp of next payment\n        // uint64 nextInstallmentTimestamp_ = getInstallmentMonthTimestamp(\n        //     sellerInfo_.selectedBidId,\n        //     sellerInfo_.installmentsPaid + 1 // the installment number that needs to be paid\n        // );\n\n\n\n        // // current timestamp should greater than nextInstallmentTimestamp_\n        // require(\n        //     uint64(block.timestamp) > nextInstallmentTimestamp_,\n        //     \"CLAIM_AFTER_APPROPRIATE_TIME\"\n        // );\n\n        bool isLastClaimablePayment_ = totalInstallments_ == sellerInfo_.installmentsPaid &&\n            // if payments claimed is zero then it means only downpayment is done\n            sellerInfo_.paymentsClaimed != 0 &&\n            // if payments claimed and second last are equal this means this is last payment claiming\n            sellerInfo_.paymentsClaimed == secondLastInstallmentPaid_;\n\n        // payments claimed should be one less than installmentsPaid\n        // no other check required as installmentsPaid will increase after a month\n        require(\n            (((sellerInfo_.paymentsClaimed < secondLastInstallmentPaid_) &&\n                (sellerInfo_.installment != InstallmentPlan.None)) || (isLastClaimablePayment_)),\n            \"CANNOT_RECLAIM_PAYMENT\"\n        );\n\n        uint8 paymentsClaimable_ = 0;\n        uint256 amountClaimable_ = 0;\n\n        // seller is claiming for the first time and only second payment is done\n        // so release downpayment only\n        if (sellerInfo_.paymentsClaimed == 0 && secondLastInstallmentPaid_ == 1) {\n\n            paymentsClaimable_ = 1;\n            amountClaimable_ = getDownPaymentAmount(sellerInfo_.selectedBidId);\n        }\n\n        // seller is claiming for the first time and all installments are done\n        // && sellerInfo_.installmentsPaid == totalInstallments_\n        if (sellerInfo_.paymentsClaimed == 0 && secondLastInstallmentPaid_ > 1) {\n\n            uint8 no_;\n\n            if (sellerInfo_.installmentsPaid == totalInstallments_) {\n\n                // secondLastInstallmentPaid_ // totalInstallments_ - 1\n                paymentsClaimable_ = sellerInfo_.installmentsPaid;\n                no_ = secondLastInstallmentPaid_;\n            } else {\n\n                paymentsClaimable_ = secondLastInstallmentPaid_; // secondLastInstallmentPaid_ // totalInstallments_ - 1\n                no_ = secondLastInstallmentPaid_ - 1;\n            }\n\n            uint256 downPayment_ = getDownPaymentAmount(sellerInfo_.selectedBidId);\n\n\n\n\n            uint256 installmentPerMonth_ = getInstallmentAmountPerMonth(entryId_);\n\n\n            amountClaimable_ = downPayment_ + (installmentPerMonth_ * no_);\n        }\n\n        // seller is claiming payment other than first\n        if (sellerInfo_.paymentsClaimed != 0) {\n\n            paymentsClaimable_ = secondLastInstallmentPaid_ - sellerInfo_.paymentsClaimed;\n            amountClaimable_ = paymentsClaimable_ * getInstallmentAmountPerMonth(entryId_);\n        }\n\n        // seller is claiming last payment\n        if (isLastClaimablePayment_) {\n\n            paymentsClaimable_ = 1;\n            amountClaimable_ = getInstallmentAmountPerMonth(entryId_);\n        }\n\n\n\n\n        // update paymentsClaimed\n        p_sellerInfo[entryId_].paymentsClaimed += paymentsClaimable_;\n\n        emit PaymentWithdrawn(\n            sellerInfo_.selectedBidId,\n            entryId_,\n            amountClaimable_,\n            p_sellerInfo[entryId_].paymentsClaimed\n        );\n\n        // if all payments claimed then delete buyerInfo and sellerInfo\n        if (p_sellerInfo[entryId_].paymentsClaimed == totalInstallments_) {\n            // delete seller\n            delete p_sellerInfo[entryId_];\n\n            // decrease total entryIds\n            p_entryIdTracker.decrement();\n\n            // delete bid\n            delete p_buyerInfo[sellerInfo_.selectedBidId];\n\n            // decrease total bidIds\n            p_bidIdTracker.decrement();\n        }\n\n        // // if last payment then delete buyerInfo and sellerInfo\n        // if (isLastClaimablePayment_) {\n        //     // delete seller\n        //     delete p_sellerInfo[entryId_];\n        //     // delete bid\n        //     delete p_buyerInfo[sellerInfo_.selectedBidId];\n        // } else {\n        //     // update paymentsClaimed\n        //     p_sellerInfo[entryId_].paymentsClaimed += paymentsClaimable_;\n        // }\n\n\n\n        // transfer amountClaimable_ to seller\n        Address.sendValue(payable(sellerInfo_.sellerAddress), amountClaimable_);\n\n\n    }\n\n    function liquidate(uint256 entryId_) external payable {\n        uint256 value_ = msg.value;\n\n        _requireIsEntryIdValid(entryId_);\n        SellerInfo memory sellerInfo_ = p_sellerInfo[entryId_];\n\n        uint256 bidId_ = sellerInfo_.selectedBidId;\n        _requireIsBidIdValid(bidId_);\n        BuyerInfo memory buyerInfo_ = p_buyerInfo[bidId_];\n\n        require(\n            _msgSender() != sellerInfo_.sellerAddress && _msgSender() != buyerInfo_.buyerAddress,\n            \"INVALID_CALLER\"\n        );\n\n        // 0 means InstallmentPlan.None\n        uint8 totalInstallments_ = getTotalInstallments(sellerInfo_.selectedBidId);\n\n\n\n\n        // None or Installments paid\n        require(\n            sellerInfo_.installmentsPaid != totalInstallments_ && totalInstallments_ != 0,\n            \"INSTALLMENTS_COMPLETE\"\n        );\n\n        // get timestamp of next payment\n        uint256 installmentMonthTimestamp_ = getInstallmentMonthTimestamp(\n            bidId_,\n            sellerInfo_.installmentsPaid + 1\n        );\n\n        // if timestamp of next payment + gracePeriod is passed then liquidate otherwise stop execution\n        require(\n            uint64(block.timestamp) > (installmentMonthTimestamp_ + gracePeriod),\n            \"INSTALLMENT_ON_TRACK\"\n        );\n\n        address oldbuyer_ = buyerInfo_.buyerAddress;\n\n        uint256 installmentPerMonth_ = getInstallmentAmountPerMonth(entryId_);\n        uint256 liquidationValue_ = (buyerInfo_.pricePaid * 95) / 100;\n\n        uint256 valueToBePaid_ = liquidationValue_ + installmentPerMonth_;\n\n\n\n\n\n        require(valueToBePaid_ == value_, \"INVALID_LIQUIDATION_VALUE\");\n\n        // update new buyer\n        p_buyerInfo[bidId_].buyerAddress = _msgSender();\n        p_buyerInfo[bidId_].pricePaid += installmentPerMonth_;\n        p_sellerInfo[entryId_].installmentsPaid++;\n\n        emit Liquidated(entryId_, bidId_, p_sellerInfo[entryId_].installmentsPaid, valueToBePaid_);\n\n        // if only last installment remains then transfer nft\n        if (sellerInfo_.installmentsPaid == totalInstallments_ - 1) {\n            IERC721(p_sellerInfo[entryId_].contractAddress).safeTransferFrom(\n                address(this),\n                _msgSender(),\n                sellerInfo_.tokenId\n            );\n        }\n\n        // transfer 95% of pricePaid to old buyer\n        Address.sendValue(payable(oldbuyer_), liquidationValue_);\n    }\n\n    function setBiddingPeriod(uint64 biddingPeriod_) external onlyOwner {\n        require(biddingPeriod_ != 0, \"INVALID_BIDDING_PERIOD\");\n        emit BiddingPeriodUpdated(biddingPeriod, biddingPeriod_);\n        biddingPeriod = biddingPeriod_;\n    }\n\n    function setGracePeriod(uint64 gracePeriod_) external onlyOwner {\n        require(gracePeriod_ != 0, \"INVALID_GRACE_PERIOD\");\n        emit GracePeriodUpdated(gracePeriod, gracePeriod_);\n        gracePeriod = gracePeriod_;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            VIEW/PURE FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function getTotalEntryIds() external view returns (uint256) {\n        return p_entryIdTracker.current();\n    }\n\n    function getTotalBidIds() external view returns (uint256) {\n        return p_bidIdTracker.current();\n    }\n\n    function getIsEntryIdValid(uint256 entryId_) public view returns (bool) {\n        return p_sellerInfo[entryId_].sellerAddress != address(0);\n    }\n\n    function getIsBidIdValid(uint256 bidId_) public view returns (bool isValid_) {\n        return p_buyerInfo[bidId_].buyerAddress != address(0);\n    }\n\n    function getSellerInfo(uint256 entryId_) public view returns (SellerInfo memory) {\n        _requireIsEntryIdValid(entryId_);\n        return p_sellerInfo[entryId_];\n    }\n\n    function getBuyerInfo(uint256 bidId_) public view returns (BuyerInfo memory) {\n        _requireIsBidIdValid(bidId_);\n        return p_buyerInfo[bidId_];\n    }\n\n    function getTotalInstallments(uint256 bidId_) public view returns (uint8) {\n        _requireIsBidIdValid(bidId_);\n\n        InstallmentPlan installment_ = p_buyerInfo[bidId_].bidInstallment;\n\n        if (installment_ == InstallmentPlan.ThreeMonths) {\n            return 3;\n        } else if (installment_ == InstallmentPlan.SixMonths) {\n            return 6;\n        } else if (installment_ == InstallmentPlan.NineMonths) {\n            return 9;\n        } else {\n            return 0; // InstallmentPlan.None\n        }\n    }\n\n    function getDownPaymentAmount(uint256 bidId_) public view returns (uint256) {\n        _requireIsBidIdValid(bidId_);\n\n        BuyerInfo memory buyerInfo_ = p_buyerInfo[bidId_];\n\n        InstallmentPlan installment_ = buyerInfo_.bidInstallment;\n        uint256 bidPrice_ = buyerInfo_.bidPrice;\n\n        if (installment_ == InstallmentPlan.ThreeMonths) {\n            return (bidPrice_ * 34) / 100; // 34%\n        } else if (installment_ == InstallmentPlan.SixMonths) {\n            return (bidPrice_ * 175) / 1000; // 17.5%\n        } else if (installment_ == InstallmentPlan.NineMonths) {\n            return (bidPrice_ * 12) / 100; // 12%\n        } else {\n            return bidPrice_; // InstallmentPlan.None\n        }\n    }\n\n    function getInstallmentAmountPerMonth(uint256 entryId_) public view returns (uint256 amount_) {\n        _requireIsEntryIdValid(entryId_);\n        SellerInfo memory sellerInfo_ = p_sellerInfo[entryId_];\n\n        uint256 bidId_ = sellerInfo_.selectedBidId;\n        _requireIsBidIdValid(bidId_);\n\n        BuyerInfo memory buyerInfo_ = p_buyerInfo[bidId_];\n\n        InstallmentPlan installment_ = buyerInfo_.bidInstallment;\n\n        // if (buyerInfo_.bidPrice == buyerInfo_.pricePaid) {\n        //     return 0;\n        // }\n\n        if (installment_ == InstallmentPlan.ThreeMonths) {\n            amount_ = (buyerInfo_.bidPrice * 33) / 100; // 33%\n        } else if (installment_ == InstallmentPlan.SixMonths) {\n            amount_ = (buyerInfo_.bidPrice * 165) / 1000; // 16.5%\n        } else if (installment_ == InstallmentPlan.NineMonths) {\n            amount_ = (buyerInfo_.bidPrice * 11) / 100; // 11%\n        }\n\n        // unreachable code as it gets reverted\n        // in case of InstallmentPlan.None\n        // else {\n        //     return 0; // InstallmentPlan.None\n        // }\n    }\n\n    // // get installment amount of specific installment number\n    // function getInstallmentAmountOf(\n    //     uint256 entryId_,\n    //     uint256 bidId_,\n    //     uint256 installmentNumber_\n    // ) public view returns (uint256) {\n    //     // installmentNumber_ == 0 gives downpayment\n    //     return\n    //         getDownPaymentAmount(bidId_) +\n    //         (installmentNumber_ * getInstallmentAmountPerMonth(entryId_));\n    // }\n\n    function getInstallmentMonthTimestamp(uint256 bidId_, uint64 installmentNumber_)\n        public\n        view\n        returns (uint64)\n    {\n        _requireIsBidIdValid(bidId_);\n        require(installmentNumber_ != 0, \"INVALID_INSTALLMENT_NUMBER\");\n        return p_buyerInfo[bidId_].timestamp + ((installmentNumber_ - 1) * ONE_MONTH);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                    TEMPORARY FRONT-END FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    // gives all nfts that are open for sale (excluding the one selectedBid)\n    function getNFTsOpenForSale()\n        external\n        view\n        returns (SellerInfo[] memory nftsOpenForSale_, uint256[] memory entryIds_)\n    {\n        uint256 totalEntryIds_ = getHistoricTotalEntryIds;\n        nftsOpenForSale_ = new SellerInfo[](totalEntryIds_);\n        entryIds_ = new uint256[](totalEntryIds_);\n\n        // Storing this outside the loop saves gas per iteration.\n        SellerInfo memory sellerInfo_;\n\n        for (uint256 i_ = 0; i_ < totalEntryIds_; i_++) {\n            // skip seller info if entryId is invalid\n            if (!getIsEntryIdValid(i_ + 1)) {\n                continue;\n            }\n\n            sellerInfo_ = getSellerInfo(i_ + 1);\n\n            if (sellerInfo_.onSale) {\n                entryIds_[i_] = i_ + 1;\n                nftsOpenForSale_[i_] = sellerInfo_;\n            }\n        }\n    }\n\n    // gives all nfts specific to user that are open for sale (excluding the one selectedBid)\n    function getUserNFTsOpenForSale(address user_)\n        external\n        view\n        returns (SellerInfo[] memory userNFTsOpenForSale_, uint256[] memory entryIds_)\n    {\n        require(user_ != address(0), \"INVALID_ADDRESS\");\n        uint256 totalEntryIds_ = getHistoricTotalEntryIds;\n        userNFTsOpenForSale_ = new SellerInfo[](totalEntryIds_);\n        entryIds_ = new uint256[](totalEntryIds_);\n\n        // Storing this outside the loop saves gas per iteration.\n        SellerInfo memory sellerInfo_;\n\n        for (uint256 i_ = 0; i_ < totalEntryIds_; i_++) {\n            // skip seller info if entryId is invalid\n            if (!getIsEntryIdValid(i_ + 1)) {\n                continue;\n            }\n\n            sellerInfo_ = getSellerInfo(i_ + 1);\n\n            if (sellerInfo_.onSale && sellerInfo_.sellerAddress == user_) {\n                entryIds_[i_] = i_ + 1;\n                userNFTsOpenForSale_[i_] = sellerInfo_;\n            }\n        }\n    }\n\n    function getAllBidsOnNFT(uint256 entryId_)\n        external\n        view\n        returns (BuyerInfo[] memory allBidsOnNFT_, uint256[] memory bidIds_)\n    {\n        uint256 totalBidIds_ = getHistoricTotalBidIds;\n        allBidsOnNFT_ = new BuyerInfo[](totalBidIds_);\n        bidIds_ = new uint256[](totalBidIds_);\n\n        for (uint256 i_ = 0; i_ < totalBidIds_; i_++) {\n            // skip buyer info if bidId is invalid\n            if (!getIsBidIdValid(i_ + 1)) {\n                continue;\n            }\n\n            if (p_buyerInfo[i_ + 1].entryId == entryId_) {\n                bidIds_[i_] = i_ + 1;\n                allBidsOnNFT_[i_] = getBuyerInfo(i_ + 1);\n            }\n        }\n    }\n\n    // get all nfts ongoing installment phase specific to user\n    function getUserNFTsOngoingInstallmentPhase(address user_)\n        external\n        view\n        returns (\n            SellerInfo[] memory sellerInfos_,\n            BuyerInfo[] memory buyerInfos_,\n            uint256[] memory downPayments_,\n            uint256[] memory monthlyPayments_,\n            uint256[] memory entryIds_,\n            uint256[] memory bidIds_\n        )\n    {\n        require(user_ != address(0), \"INVALID_ADDRESS\");\n        uint256 totalEntryIds_ = getHistoricTotalEntryIds;\n        uint256 totalBidIds_ = getHistoricTotalBidIds;\n\n        sellerInfos_ = new SellerInfo[](totalEntryIds_);\n        buyerInfos_ = new BuyerInfo[](totalBidIds_);\n        downPayments_ = new uint256[](totalEntryIds_);\n        monthlyPayments_ = new uint256[](9); // max 9 monthly payments\n        entryIds_ = new uint256[](totalEntryIds_);\n        bidIds_ = new uint256[](totalBidIds_);\n\n        // Storing this outside the loop saves gas per iteration.\n        SellerInfo memory sellerInfo_;\n        BuyerInfo memory buyerInfo_;\n\n        for (uint256 i_ = 0; i_ < totalEntryIds_; i_++) {\n            // skip seller info if entryId is invalid\n            if (!getIsEntryIdValid(i_ + 1)) {\n                continue;\n            }\n\n            sellerInfo_ = getSellerInfo(i_ + 1);\n\n            // skip loop if no selected bid id\n            if (sellerInfo_.selectedBidId == 0) {\n                continue;\n            }\n\n            buyerInfo_ = getBuyerInfo(sellerInfo_.selectedBidId);\n\n            if (buyerInfo_.buyerAddress == user_) {\n                sellerInfos_[i_] = sellerInfo_;\n                buyerInfos_[i_] = buyerInfo_;\n\n                downPayments_[i_] = getDownPaymentAmount(sellerInfo_.selectedBidId);\n                monthlyPayments_[i_] = getInstallmentAmountPerMonth(sellerInfo_.selectedBidId);\n\n                entryIds_[i_] = i_ + 1;\n                bidIds_[i_] = i_ + 1;\n            }\n        }\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                            INTERNAL FUNCTIONS\n    //////////////////////////////////////////////////////////////*/\n\n    function _requireIsEntryIdValid(uint256 entryId_) internal view {\n        require(getIsEntryIdValid(entryId_), \"INVALID_ENTRY_ID\");\n    }\n\n    function _requireIsBidIdValid(uint256 bidId_) internal view {\n        require(getIsBidIdValid(bidId_), \"INVALID_BID_ID\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@rari-capital/solmate/src/auth/Owned.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Simple single owner authorization mixin.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/auth/Owned.sol)\nabstract contract Owned {\n    /*//////////////////////////////////////////////////////////////\n                                 EVENTS\n    //////////////////////////////////////////////////////////////*/\n\n    event OwnerUpdated(address indexed user, address indexed newOwner);\n\n    /*//////////////////////////////////////////////////////////////\n                            OWNERSHIP STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n    address public owner;\n\n    modifier onlyOwner() virtual {\n        require(msg.sender == owner, \"UNAUTHORIZED\");\n\n        _;\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n    //////////////////////////////////////////////////////////////*/\n\n    constructor(address _owner) {\n        owner = _owner;\n\n        emit OwnerUpdated(address(0), _owner);\n    }\n\n    /*//////////////////////////////////////////////////////////////\n                             OWNERSHIP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n    function setOwner(address newOwner) public virtual onlyOwner {\n        owner = newOwner;\n\n        emit OwnerUpdated(msg.sender, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner nor approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/test/MockERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MockERC721 is ERC721 {\n    uint256 public totalSupply;\n\n    constructor() ERC721(\"Mock ERC721\", \"MERC721\") {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function mint(address to, uint256 tokenId) public {\n        _mint(to, tokenId);\n        totalSupply++;\n    }\n\n    function burn(uint256 tokenId) public {\n        _burn(tokenId);\n        totalSupply--;\n    }\n\n    function _baseURI() internal pure override returns (string memory) {\n        return \"https://ikzttp.mypinata.cloud/ipfs/QmQFkLSQysj94s5GvTHPyzTxrawwtjgiiYS2TBLgrvw8CW/\";\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}